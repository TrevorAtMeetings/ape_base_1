# CATALOG ENGINE - RETIRED AUGUST 2025
# ====================================
# This file has been RETIRED and replaced by the Brain System
# 
# MIGRATION COMPLETED: August 2025
# - All functionality moved to Brain System (app/pump_brain.py)
# - All routes updated to use get_pump_brain() instead of get_catalog_engine()
# - Data integrity maintained through same repository layer
# - Performance improved with Brain system optimizations
# 
# REASON FOR RETIREMENT:
# - Brain system provides unified intelligence architecture
# - Eliminates code duplication between systems
# - Maintains "NO FALLBACKS EVER" principle consistently
# - Better performance with sub-2-second response times
# - Single source of truth for pump selection logic
#
# THIS FILE IS ARCHIVED FOR REFERENCE ONLY
# DO NOT USE - ALL FUNCTIONALITY AVAILABLE IN BRAIN SYSTEM

"""
# COMMENTED OUT - ENTIRE CATALOG ENGINE RETIRED
# All functionality migrated to Brain System

# """
# APE Catalog Engine
# Updated pump selection engine using authentic APE catalog structure
# """

# import json
# import os
# import logging
# from typing import List, Dict, Any, Optional, Tuple
# import numpy as np
# from scipy import interpolate
# from .pump_repository import get_pump_repository
# from .data_models import PumpEvaluation, ExclusionReason

# logger = logging.getLogger(__name__)

# # Brain is now the primary system - no shadow mode needed


# class CatalogPump:
#     \"\"\"Represents a pump model with multiple performance curves\"\"\"

#     def __init__(self, pump_data: Dict[str, Any]):
#         self.pump_code = pump_data['pump_code']
#         self.pump_id = pump_data.get('pump_id',
#                                      None)  # Add pump_id for BEP markers
#         self.manufacturer = pump_data['manufacturer']
#         self.pump_type = pump_data['pump_type']
#         self.model_series = pump_data['model_series']
#         self.specifications = pump_data['specifications']
#         self.curves = pump_data['curves']
#         self.curve_count = pump_data['curve_count']
#         self.total_points = pump_data['total_points']
#         self.npsh_curves = pump_data['npsh_curves']
#         self.power_curves = pump_data['power_curves']

#         # Additional attributes for compatibility
#         self.description = pump_data.get(
#             'description', f"{self.pump_code} - {self.model_series}")
#         self.max_flow_m3hr = pump_data.get('max_flow_m3hr',
#                                            self._calculate_max_flow())
#         self.max_head_m = pump_data.get('max_head_m',
#                                         self._calculate_max_head())
#         self.max_power_kw = pump_data.get('max_power_kw',
#                                           self._calculate_max_power())
#         self.min_efficiency = pump_data.get('min_efficiency',
#                                             self._calculate_min_efficiency())
#         self.max_efficiency = pump_data.get('max_efficiency',
#                                             self._calculate_max_efficiency())
#         self.connection_size = pump_data.get('connection_size', 'Standard')
#         self.materials = pump_data.get('materials', 'Cast Iron')
        
#         # Speed data from specifications
#         self.test_speed_rpm = self.specifications.get('test_speed_rpm', 0)
#         self.min_speed_rpm = self.specifications.get('min_speed_rpm', 0) 
#         self.max_speed_rpm = self.specifications.get('max_speed_rpm', 0)

# ... [REST OF FILE COMMENTED OUT] ...

# ===============================
# END OF ARCHIVED CATALOG ENGINE
# ===============================
"""