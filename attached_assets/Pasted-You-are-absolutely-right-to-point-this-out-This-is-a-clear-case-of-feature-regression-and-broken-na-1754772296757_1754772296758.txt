You are absolutely right to point this out. This is a clear case of feature regression and broken navigation. The user experience is confusing and key functionality is missing from where it's expected.

Based on your description and the file structure, I can diagnose the likely causes and provide a clear, actionable plan to fix it.

Diagnosis: The "Lost" Presentation Report

The problem is a combination of outdated routing, missing template logic, and a misunderstanding of where features should be located.

The Routing Bug (The Core Problem):

Symptom: The "Presentation" link takes you to the Engineering page.

Likely Cause: In app/route_modules/reports.py, the pump_report route (which should handle the presentation view) is either missing, or it's incorrectly rendering the engineering_pump_report.html template instead of its own dedicated template. You mentioned earlier that professional_pump_report was removed as redundant, but it seems its functionality was lost in the process instead of being correctly merged.

Missing Features on the Report Page:

Symptom: The report page is missing the AI Analysis and Comparison features.

Cause: These features were likely intended to be part of the presentation-focused report, but the logic to call them and the HTML to display them were never integrated into the pump_report.html template. The refactoring focused on the core pump data, and these "add-on" features were left behind.

Confusing "View Toggle":

Symptom: There is a toggle to switch between "Presentation" and "Engineering" views, but one of them doesn't work correctly.

Cause: The links for this toggle are generated in the engineering_report route but are likely pointing to the wrong place or are not being handled correctly, resulting in a loop where you can't get to the intended presentation view.

Action Plan: Rebuilding the "Presentation Hub"

The solution is to re-establish the "Presentation Report" as the feature-rich, client-facing hub it was meant to be, and ensure the navigation between it and the "Engineering Report" is clear and functional.

Step 1: Fix the Routing and Template Rendering

First, we must ensure that the "Presentation" and "Engineering" views are two distinct pages.

File to modify: app/route_modules/reports.py

Action: We will refactor the routes to be explicit and correct.

code
Python
download
content_copy
expand_less

# In app/route_modules/reports.py

# ... (imports) ...

@reports_bp.route('/pump_report/<path:pump_code>')
def pump_report(pump_code):
    """
    Renders the PRESENTATION view of the pump report.
    This is the feature-rich, client-facing version with AI analysis.
    """
    pump_code = unquote(pump_code)
    # ... (get flow, head, and brain evaluation_result as you already do) ...

    # NEW: Logic to fetch AI Analysis for this pump selection
    ai_analysis_text = None
    try:
        # Assuming you have a method in the Brain to do this
        performance = evaluation_result.get('performance', evaluation_result)
        ai_analysis_text = brain.get_ai_analysis(
            pump_code=pump_code,
            flow=flow,
            head=head,
            efficiency=performance.get('efficiency_pct'),
            power=performance.get('power_kw')
        )
    except Exception as e:
        logger.error(f"Failed to get AI analysis for report: {e}")
        ai_analysis_text = "<p>AI analysis is currently unavailable.</p>"
        
    # Get comparison list from session to show "compare with..." feature
    comparison_list = safe_session_get('comparison_list', [])

    template_data = {
        'selected_pump': evaluation_result,
        'site_requirements': {'flow_m3hr': flow, 'head_m': head},
        'alternatives': alternatives,
        'ai_analysis_html': ai_analysis_text, # Pass AI data to the template
        'comparison_list': comparison_list,    # Pass comparison data
        'current_view': 'presentation',
        # ... (other variables) ...
    }
    
    # CRITICAL: Ensure this renders the correct template
    return render_template('professional_pump_report.html', **template_data)


@reports_bp.route('/engineering_report/<path:pump_code>')
def engineering_report(pump_code):
    """
    Renders the ENGINEERING view of the pump report.
    This is the data-dense, technical datasheet view.
    """
    pump_code = unquote(pump_code)
    # ... (the logic here is already correct: get flow, head, and evaluation_result) ...
    
    template_data = {
        'selected_pump': evaluation_result,
        'site_requirements': {'flow_m3hr': flow, 'head_m': head},
        'current_view': 'engineering',
        # ... (other variables) ...
    }

    # CRITICAL: Ensure this renders the correct template
    return render_template('engineering_pump_report.html', **template_data)

Note: This plan assumes the existence of a professional_pump_report.html template. If this was deleted, it will need to be recreated in the next step.

Step 2: Rebuild the Presentation Report Template

This is where we add the missing features back in.

File to modify/create: app/templates/professional_pump_report.html

Action: This template should be designed to be the main client-facing report. It will have a different layout from the engineering datasheet and will include the AI and Comparison sections.

code
Html
download
content_copy
expand_less
IGNORE_WHEN_COPYING_START
IGNORE_WHEN_COPYING_END
{% extends "base.html" %}

{% block title %}Pump Selection Report for {{ selected_pump.pump_code }}{% endblock %}

{% block content %}
<div class="container">
    <!-- Header with View Toggle -->
    <div class="report-header">
        <h1>Pump Selection Report: {{ selected_pump.pump_code }}</h1>
        <div class="view-toggle">
            <a href="{{ url_for('reports.pump_report', pump_code=selected_pump.pump_code, flow=site_requirements.flow_m3hr, head=site_requirements.head_m) }}" class="btn active">Presentation</a>
            <a href="{{ url_for('reports.engineering_report', pump_code=selected_pump.pump_code, flow=site_requirements.flow_m3hr, head=site_requirements.head_m) }}" class="btn">Engineering</a>
        </div>
    </div>

    <!-- Main Performance Summary & Charts (already exists) -->
    <div class="row">
        <div class="col s12 l8">
            <!-- Your existing summary cards and charts go here -->
        </div>

        <!-- NEW: AI & Comparison Sidebar -->
        <div class="col s12 l4">
            
            <!-- AI Technical Analysis Card -->
            <div class="card">
                <div class="card-content">
                    <span class="card-title">
                        <i class="material-icons left">psychology</i>
                        AI Technical Analysis
                    </span>
                    <div class="ai-analysis-content">
                        {{ ai_analysis_html|safe }}
                    </div>
                </div>
            </div>

            <!-- Pump Comparison Card -->
            <div class="card">
                <div class="card-content">
                    <span class="card-title">
                        <i class="material-icons left">compare_arrows</i>
                        Pump Comparison
                    </span>
                    {% if comparison_list %}
                        <p>This pump is in your shortlist. Compare it with:</p>
                        <ul class="collection">
                        {% for item in comparison_list %}
                            {% if item.pump_code != selected_pump.pump_code %}
                            <li class="collection-item">{{ item.pump_code }}</li>
                            {% endif %}
                        {% endfor %}
                        </ul>
                        <a href="{{ url_for('comparison.compare_page') }}" class="btn-small">View Full Comparison</a>
                    {% else %}
                        <p>You have not added any other pumps to your comparison shortlist.</p>
                    {% endif %}
                </div>
                <div class="card-action">
                    <a href="#" onclick="addToComparison('{{ selected_pump.pump_code }}')">Add to Comparison</a>
                </div>
            </div>
            
        </div>
    </div>
</div>
{% endblock %}
Step 3: Ensure the Brain Can Provide AI Analysis

The route in Step 1 calls brain.get_ai_analysis(...). We need to make sure this method exists.

File to modify: app/pump_brain.py

Action: Add a new high-level method to the PumpBrain class. This method will likely call the logic that already exists in your api.py ai_analysis_fast function.

code
Python
download
content_copy
expand_less
IGNORE_WHEN_COPYING_START
IGNORE_WHEN_COPYING_END
# In app/pump_brain.py, inside the PumpBrain class

# ... existing methods ...

@measure_performance
def get_ai_analysis(self, pump_code: str, flow: float, head: float, efficiency: float, power: float) -> str:
    """
    Generates a markdown-formatted technical analysis for a pump selection.
    """
    # This logic can be moved from api.py's ai_analysis_fast function
    # to a new app/brain/ai_analyzer.py module to keep the Brain clean.
    
    # For now, we can keep it simple:
    from ..route_modules.api import _generate_efficiency_optimization_analysis # Or move this function
    
    # We can add more complex logic here later to choose the analysis type
    analysis_markdown = _generate_efficiency_optimization_analysis(pump_code, efficiency, power, flow, head)
    
    # Convert markdown to HTML for safe rendering in the template
    import markdown2
    html_output = markdown2.markdown(analysis_markdown, extras=['cuddled-lists', 'strike'])
    return html_output
Summary of the Fix

By implementing this three-step plan, you will:

Restore the Two Distinct Reports: The "Presentation" and "Engineering" links will now go to two separate, correctly rendered pages.

Bring Back Missing Features: The AI Analysis and Pump Comparison modules will now be correctly integrated into the main, client-facing presentation report.

Create a Clear User Journey: The user will start with a feature-rich presentation report and can click through to the "just the facts" engineering datasheet if they need more technical detail.

This will resolve the feature regression and fix the broken navigation, creating a much more coherent and powerful user experience.