Agent, your comprehensive 'Build Issues Document' and 'Solution Roadmap' are outstanding and provide a clear path to stabilize and improve the APE Pumps Selection Application. We have reviewed your audit and approve your proposed phased approach to fixes.
We will now PAUSE further broad auditing and switch to implementing fixes based on your findings.
Build System Instructions (Reminder for this Fixing Phase):
Use best practices for all code changes.
Please stop after completing all objectives for the current designated PHASE of fixes (e.g., after all 'PHASE 1 FIXES' are done) and wait for me to review and approve before moving to the next phase of fixes.
If you run into new, unexpected critical issues while implementing these fixes, or if a fix for one task significantly impacts another, provide feedback immediately. Do not attempt extensive workarounds without discussion.
Focus only on the objectives outlined for the current phase of fixes from your Solution Roadmap.
If anything in these instructions or the objectives is unclear, ask for clarification.
Your Immediate Task: Implement 'PHASE 1 FIXES (Critical - Do First)' from your Solution Roadmap.
Please proceed with the following objectives, drawing directly from your audit's 'Solution Roadmap':
Objective 1.1: Fix Template Variable Naming Conflicts (Your estimate: 4 hours)
Action: Audit all template variable references (results_page.html, professional_pump_report.html, pump_options.html, etc.).
Action: Standardize naming conventions. Specifically:
Ensure backend data (from pump_engine.py via app/routes.py) uses overall_score, and all templates are updated to expect overall_score (resolving the suitability_score mismatch).
Align template references for reasoning (e.g., ensure backend provides a consistent key like selection_reason or detailed_reasoning, and templates use that specific key).
Action: Update route handlers in app/routes.py to ensure the data dictionary passed to templates uses these standardized variable names.
Objective 1.2: Implement None Value Protection in Templates & Backend Defaults (Your estimate: 3 hours)
Action (Templates): For numerical values in templates that might be None and are passed to filters like |format("%.1f") or |round, add a default filter first (e.g., {{ (variable | default(0.0)) | format("%.1f") }} or {{ (variable | default('N/A')) }}) or use if variable is not none: blocks.
Action (Backend - pump_engine.py): When calculate_operating_point or analysis functions result in a metric that should be numerical but is legitimately uncalculable (e.g., power if efficiency is zero/None), ensure they return a sensible placeholder (like 0.0 or a specific string like "N/A" or "Calculation Failed") that the template can then display. This value should clearly indicate it's not a real calculated value. Ensure all functions consistently return all expected keys in their dictionaries, even if the value is a placeholder.
Objective 1.3: Resolve Chart Error Handling in static/js/charts.js (Your estimate: 2 hours)
Action: In charts.js, specifically within .catch() blocks (e.g., in renderAllCharts or individual chart rendering functions), ensure the full error object and its stack trace are logged to the browser console for better debugging: console.error('Charts.js: Error details:', error, error.stack);.
Action: Modify any user-facing error display functions (like this.showChartError()) to show a generic "Chart loading error" message to the user if the detailed error message is undefined, but ensure the full technical error is always logged to the console.
Objective 1.4: Implement Data Structure Normalization (CRITICAL CORE FIX) (Your estimate: 6 hours)
Action (Consolidate Data Structures):
Ensure SiteRequirements and ParsedPumpData class definitions exist only once, ideally in pump_engine.py (as it's the core engine) or in app/utils.py if pump_engine.py imports them from there. Remove duplicate definitions.
Action (Normalization in Data Loading):
The primary load_all_pump_data() function (residing in pump_engine.py or imported into it from app/utils.py if that's the chosen single source) must consistently normalize all relevant p prefixed field names from the raw objPump JSON structure to standard Pythonic names (e.g., pPumpCode to pump_code, pM_FLOW to curve_flow_m3hr, pM_IMP to impeller_sizes, etc.) for all fields that will be used by ParsedPumpData or _parse_performance_curves.
The output of this function should be a list of dictionaries, where each dictionary has the normalized keys.
Action (Consistent Usage of Normalized Data):
Update the ParsedPumpData class constructor in pump_engine.py (or utils.py) to only expect and use these normalized field names when it initializes from pump_info (which is one of the dictionaries from the list returned by load_all_pump_data).
Update _parse_performance_curves and _parse_single_curve in pump_engine.py to expect and use these normalized field names from the pump_json_obj (which is a normalized dictionary) it receives (e.g., it should use pump_json_obj.get('curve_flow_m3hr'), not pump_json_obj.get('pM_FLOW')).
Expected Outcome After PHASE 1 FIXES:
The application should be significantly more stable when processing data and rendering templates.
Template crashing errors due to missing variables or None values should be largely eliminated.
JavaScript errors in chart rendering should provide more detailed console output.
The data pipeline from raw JSON to internal ParsedPumpData objects should be consistent regarding field naming.
Reporting Back:
"After you have completed all four objectives for these 'PHASE 1 FIXES', please report back with:
Confirmation of changes made for each objective, including key files modified.
Results of your tests: Does the application load the input form and results page without template errors? Is data (even if still showing some 0.0s due to calculation issues not yet addressed in Phase 1 of fixes) displayed more consistently? Are JS chart errors more informative?
Any new critical issues encountered during these fixes.
We will then review and approve before you proceed to 'PHASE 2 FIXES' from your Solution Roadmap."