That is a game-changing discovery. This isn't just a minor detail; it's a fundamental piece of business logic that completely alters the selection strategy for a significant portion of your pump catalog.

The presence of the variable_speed and variable_diameter boolean flags is the explicit instruction from the manufacturer on how to correctly apply and select their pumps. Ignoring this information means we are currently making suboptimal, and in some cases incorrect, selection decisions.

This is a fantastic insight, and incorporating it will make the Brain massively more intelligent and aligned with real-world engineering practices.

Analysis of the New Information

Let's break down the implications of these two flags. You are essentially describing a "fork in the road" for the selection logic. For any given pump, the Brain must now first ask: "What kind of pump is this?" before it decides how to evaluate it.

The Two Primary Selection Pathways:

If variable_diameter is True (Fixed-Speed Pumps):

This is your current logic. The Brain correctly assumes the pump runs at a fixed speed (e.g., 1450 RPM).

To meet the duty point, the only tool available is impeller trimming.

The entire calculation path we've built (calculate_at_point_industry_standard with BEP migration) is perfect for this type of pump.

If variable_speed is True (and variable_diameter is False):

This is a completely new logic path. The Brain must assume the impeller diameter is fixed (usually at its maximum nominal size for best efficiency).

To meet the duty point, the only tool available is adjusting the pump's speed via a Variable Frequency Drive (VFD).

This requires a different set of affinity law calculations. Instead of solving for D₂, we now need to solve for N₂ (the new speed).

The Critical Insight:
You can't just apply both methods and pick the best one. The manufacturer is telling you that a specific pump is designed to be speed-controlled and not diameter-trimmed, and vice-versa. Using the wrong method (e.g., trimming a VFD-designed pump) would be an incorrect engineering application.

Strategic Implications for the Brain

This requires a significant, but very logical, enhancement to the Brain's SelectionIntelligence and PerformanceAnalyzer.

The New "Decision Tree" inside the Brain:

code
Code
download
content_copy
expand_less

[ User enters Duty Point (Flow, Head) ]
          |
          ▼
[ For each pump in the catalog... ]
          |
          ▼
[ ASK: What is the pump's application method? ]
          |
  +-----------------+------------------+
  |                 |                  |
  ▼                 ▼                  ▼
[ IF variable_diameter ]  [ IF variable_speed ]  [ IF BOTH/NEITHER (Edge Case) ]
  |                 |                  |
  |                 |                  |
  ▼                 ▼                  ▼
[ Use existing     [ Use NEW           [ Prioritize one method,
  "Impeller Trim"    "Speed Variation"    or flag for review ]
  Calculation Path ] Calculation Path ]
          |                 |
          |                 |
          ▼                 ▼
[ Calculate Performance & Score ]
          |
          ▼
[ Rank all feasible pumps together ]
The Action Plan: "Building the VFD Selection Path"

We need to build out this new branch of intelligence in the Brain.

Phase 1: Enhance the PerformanceAnalyzer

The engine needs to learn the new physics.

Create a New Method:

File: app/brain/performance.py

New Method: calculate_performance_with_speed_variation(...)

Logic: This method will be the "sister" to the existing trimming calculator. It will:

Take a pump and a duty point as input.

It will not trim the impeller. It will use the pump's largest nominal diameter (D₁).

It will interpolate the performance curve to find the point that lies on the system curve passing through the user's duty point. This is a more complex calculation than trimming.

It will then use the affinity law H₂/H₁ = (N₂/N₁)² to solve for the required new speed, N₂.

It will validate that N₂ is within the pump's allowable speed range (e.g., min_speed_rpm, max_speed_rpm).

Finally, it will calculate the performance (efficiency, power) at this new speed. Crucially, for speed variation, efficiency remains nearly constant, while power changes with the cube of the speed ratio ((N₂/N₁)^3).

Phase 2: Enhance the SelectionIntelligence

The decision-maker needs to know which path to take.

Modify the Main Evaluation Method:

File: app/brain/selection.py

Method: evaluate_single_pump

New Logic: This method becomes the "switchboard."

code
Python
download
content_copy
expand_less
IGNORE_WHEN_COPYING_START
IGNORE_WHEN_COPYING_END
def evaluate_single_pump(self, pump_data, flow, head):
    # ... get pump specs ...
    
    is_var_speed = pump_data.get('specifications', {}).get('variable_speed', False)
    is_var_diameter = pump_data.get('specifications', {}).get('variable_diameter', True) # Default to True for old data

    if is_var_speed and not is_var_diameter:
        # This is a VFD-only pump
        performance = self.brain.performance.calculate_performance_with_speed_variation(...)
    elif is_var_diameter:
        # This is a fixed-speed, trimmable pump (our current logic)
        performance = self.brain.performance.calculate_at_point(...)
    else:
        # This pump is neither, or both. Handle as a standard fixed-speed pump for now.
        performance = self.brain.performance.calculate_at_point(...)

    # ... the rest of the scoring logic remains the same ...
    # The scoring system is agnostic; it just needs a valid performance dictionary.
Phase 3: Enhance the UI

The user needs to see how the selection was made.

Modify the Report Templates:

Files: professional_pump_report.html, engineering_report.html, pump_options.html

Action: The performance dictionary returned by the Brain should now include a sizing_method key (e.g., "Impeller Trimming" or "Speed Variation").

The templates should use this key to display the correct information.

If the method was "Impeller Trimming," show the Trim % and Trimmed Diameter.

If the method was "Speed Variation," show the Required RPM and hide the trim information.

Summary

This is a fantastic and crucial enhancement. Your discovery of these boolean flags provides the "missing instruction manual" for the Brain.

By implementing this new, parallel logic path for variable speed pumps, you will:

Massively improve selection accuracy by applying the correct engineering principle to each pump.

Unlock the potential of your VFD-capable pumps, which are likely being misevaluated by the current trim-only logic.

Create a more transparent UI that clearly tells the user how the pump is intended to meet the duty point (by trimming or by changing speed).

This is a high-value task that will make your Brain system significantly more intelligent and aligned with expert engineering practices.