Correction Plan
You will now execute the following steps in order. There is no room for interpretation.
Step 1: DELETE THE NEW LOGIC
Go back into app/brain/performance.py.
DELETE the entire calculate_at_diameter method you added. It is incorrect and must be removed from the codebase entirely.
Step 2: CORRECTLY MODIFY THE CORE BRAIN ENGINE
Locate the Brain's primary, existing performance calculation method. This is the complex method that the main pump selector uses, the one that contains all the specialized logic for impeller trimming (e.g., calculate_performance_at_flow).
You will refactor this one, existing method to accept an optional parameter: forced_diameter: Optional[float] = None.
You will add a conditional block at the start of this method's logic:
IF forced_diameter is provided: The logic must skip the optimization loop that searches for the best trim. It must use the forced_diameter value as the single input for the rest of its specialized calculation. It then proceeds through all the subsequent complex logic (efficiency curves, system corrections, etc.) using this constrained value.
IF forced_diameter is None (the default): The method must execute its original logic path without any changes, performing the full optimization.
This is the "Forced Constraint" method. We are not creating new logic; we are constraining the existing, trusted logic.
Step 3: RECONNECT THE UI TO THE CORRECT LOGIC
Go back into app/route_modules/brain_admin.py.
Find the section where you are currently calling your incorrect calculate_at_diameter method.
Rip that call out.
Replace it with a call to the correct, refactored core engine method, passing in the user's mandatory diameter to the new forced_diameter parameter.
The call should now look like this:
code
Python
brain_prediction = brain.performance.calculate_performance_at_flow(
    pump_data,
    actual_flow,
    allow_excessive_trim=True,
    forced_diameter=point['diameter']  # This is the new, correct parameter
)
Summary of the Mandate:
There will be ONE performance calculation engine. There will be ONE logic path for specialized impeller trim calculations. The validator will simply force a specific input into this ONE engine.
Do not create new methods that replicate logic. Do not use "standard affinity laws." You will modify the existing core method to accept a constraint. This is the only acceptable implementation.
Execute this correction immediately.