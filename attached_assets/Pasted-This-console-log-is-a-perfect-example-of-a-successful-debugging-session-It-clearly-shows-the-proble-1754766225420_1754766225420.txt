This console log is a perfect example of a successful debugging session. It clearly shows the problem, the evidence, and points directly to the flawed logic. Thank you for sharing it.

The diagnosis is definitive: Your new "head oversizing penalty" is acting as a hard gate and is far too aggressive. It's working "too well," but based on a flawed premise, and is therefore incorrectly eliminating every single potential pump from the results.

Let's break down the evidence and the clear path to fixing it.

Diagnosis: The Overzealous "Head Oversizing" Gate

The User's Action: A user performs a completely standard search for 350 mÂ³/hr @ 50 m. This is a very reasonable duty point that should yield multiple results.

The Brain's Response (The Evidence): The logs are flooded with messages that reveal exactly what's happening internally.

INFO:app.brain.selection:Pump 10/12 DME: SEVERE head oversizing 88.2% - BEP 94.12m vs required 50.0m

INFO:app.brain.selection:Pump 150-125-315: SEVERE head oversizing 133.1% - BEP 116.53m vs required 50.0m

INFO:app.brain.selection:Pump 200-200-540 4P: Head oversizing 44.5% - BEP 72.23m vs required 50.0m

This pattern repeats for every potentially suitable pump.

The Flawed Premise: The current logic compares the user's required head (50m) to the pump's BEP head (e.g., 94.12m). This comparison is fundamentally incorrect for determining suitability.

A pump's BEP is its point of maximum efficiency, which is often at a much higher head than many of its valid, everyday operating points. A pump designed with a BEP at 94m can often operate perfectly well and efficiently at 50m, usually by using a trimmed impeller.

The logic is conflating the pump's maximum efficiency point with its maximum allowable operating point.

The Resulting Failure:

Because this flawed check is likely acting as a hard gate (immediately disqualifying a pump) instead of a scoring penalty, every pump that could be trimmed to meet the 50m requirement is being thrown out pre-emptively.

The log INFO:app.route_modules.main_flow:Tiered results: 0 preferred, 0 allowable pumps confirms that not a single pump survived this initial, flawed gate.

The system then correctly flashes the message "No suitable pumps found" and redirects the user, which is the right behavior when no results are found.

Action Plan: How to Fix the Brain's Logic

The "head oversizing" concept is a good, advanced engineering idea, but it must be applied correctly. It should be a scoring penalty applied at the end, not a hard gate at the beginning.

Step 1: Locate and Modify the Flawed Logic

File: app/brain/selection.py

Method: evaluate_single_pump

Find: The code block that calculates head_ratio_pct and applies the oversizing_penalty.

Step 2: Change the Logic from a Gate to a Scoring Penalty

This is the most critical change. The logic should not return or set feasible = False. It should only calculate a negative value to be applied to the final score.

Current (Inferred) Flawed Logic in evaluate_single_pump:

code
Python
download
content_copy
expand_less

# This is likely what's happening now:
head_ratio_pct = ((bep_head - head) / head) * 100
if head_ratio_pct > self.severe_oversizing_threshold:
    evaluation['feasible'] = False # <-- THIS IS THE BUG
    evaluation['exclusion_reasons'].append('Severely oversized BEP head')
    return evaluation # <-- THIS STOPS THE PROCESS

Recommended Corrected Logic in evaluate_single_pump:

code
Python
download
content_copy
expand_less
IGNORE_WHEN_COPYING_START
IGNORE_WHEN_COPYING_END
# In app/brain/selection.py -> evaluate_single_pump

# ... inside the main try block ...

# Initialize penalty to zero at the start of the evaluation
oversizing_penalty = 0

# Check BEP and calculate head oversizing
specs = pump_data.get('specifications', {})
bep_head = specs.get('bep_head_m', 0)

# Only calculate penalty if we have the data to do so
if bep_head > 0 and head > 0:
    head_ratio_pct = ((bep_head - head) / head) * 100
    
    # Check if the penalty should be applied
    if head_ratio_pct > self.head_oversizing_threshold:
        if head_ratio_pct > self.severe_oversizing_threshold:
            oversizing_penalty = -50  # Massive penalty for severely oversized pumps
        else:
            oversizing_penalty = -25 # Heavy penalty for moderately oversized
        
        logger.info(f"Pump {pump_data.get('pump_code')}: Applying head oversizing penalty of {oversizing_penalty} points.")

# !!! IMPORTANT !!!
# Do NOT return here. Continue with the rest of the evaluation logic:
# - Physical capability check
# - Performance calculation
# - Scoring of BEP proximity, efficiency, etc.

# ... after all positive scores have been calculated ...

# Add the penalty to the score components for transparency
evaluation['score_components']['head_oversizing_penalty'] = oversizing_penalty

# Apply the penalty to the final total score
evaluation['total_score'] = sum(evaluation['score_components'].values())

Step 3: Adjust the Penalty Thresholds (Crucial for getting results)

The current thresholds (40% and 70%) are far too strict for a BEP head comparison. A pump's BEP head can easily be 100% or 200% higher than a valid, trimmable operating point.

Recommendation: Start with much more lenient values in app/brain/selection.py to ensure you get results, then tune them.

code
Python
download
content_copy
expand_less
IGNORE_WHEN_COPYING_START
IGNORE_WHEN_COPYING_END
# In the __init__ of SelectionIntelligence
self.head_oversizing_threshold = 150.0  # Apply penalty if BEP head is >150% of required head
self.severe_oversizing_threshold = 300.0 # Apply severe penalty if >300%
Summary

The Problem: Your "head oversizing" logic is fundamentally flawed in its application. It's using the wrong metric (BEP head instead of deliverable head) and is implemented as a hard gate instead of a scoring penalty.

The Solution:

Change the logic from an exclusion gate to a negative scoring penalty.

Drastically increase the thresholds to more realistic values (e.g., 150% and 300%).

The Outcome: By making this change, pumps will no longer be unfairly eliminated. An oversized pump might get a score of 95 - 25 = 70, while a perfectly sized pump gets a score of 92 - 0 = 92. The correctly sized pump will now correctly rank higher, and you will get a list of valid results instead of an empty page.