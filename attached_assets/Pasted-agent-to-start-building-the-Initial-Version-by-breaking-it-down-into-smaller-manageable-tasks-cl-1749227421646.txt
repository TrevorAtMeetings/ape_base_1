agent to start building the "Initial Version" by breaking it down into smaller, manageable tasks, closely following the structure we've outlined.
Instructions for the Agent - Focusing on "Initial Version":
(Reiterate our detailed Phase 1, 2, and 3 instructions, but perhaps with a slight adjustment for the interactive charts if the agent is to attempt it upfront).
Phase 1: Foundation & Core Backend Logic (No Change from our detailed plan)
* Project Setup
* Data Loading & Structures (using the provided objPump JSON format)
* pump_parser.py (with power curve calculation)
* performance_calculator.py (interpolation)
* selection_engine.py (scoring, Top 3 selection with BEP focus)
Phase 2: Web Application - Input & Basic Results with Charts
* Flask Application Setup (main.py)
* Requirements Input Form (app/templates/input_form.html):
* Agent's Choice (or your preference):
* Option A (Simpler Start): All sections visible on one page. Focus on getting data to the backend.
* Option B (If Agent is Capable): Attempt basic progressive reveal with JS (e.g., simple show/hide based on "Next" buttons within the single HTML page).
* Style with basic CSS or a linked Material Design CSS library.
* Results Display Page (app/templates/results_page.html):
* Display Top 3 recommendations (Suggested Pump prominent).
* Textual display of details and operating points.
* Performance Charts (Key Decision based on Agent's "interactive" comment):
* Option A (Recommended for initial stability): "Generate static Matplotlib charts for the suggested pump and embed them as PNGs. We will upgrade to interactive Plotly.js charts in a later step if this proves too complex for the initial build." (This provides a fallback).
* Option B (If agent is to attempt interactive charts now): "Integrate the Plotly.js Charting Component as per the detailed specification. The Python backend must pass the pumpRecommendation data (including curve_data and performance_at_target) as JSON to the template. The HTML template will include the Plotly.js library and the JavaScript functions from the component spec to render the four interactive charts for the suggested pump." (This is more complex for the AI upfront).
* Simple HTML comparison table for the Top 3.
* "View Full Report" button.
Phase 3: Detailed PDF Report (APE Pumps Template)
* report_generator.py (to create report_context with detailed reasoning).
* PDF Generation Route.
* app/templates/ape_report_template.html (styled for APE branding for WeasyPrint).
* Charts in PDF: "Embed the static Matplotlib PNG chart images (generated for the web view or regenerated for PDF context) into the ape_report_template.html for WeasyPrint."
* PDF download functionality.
Communicating with the Agent:
Provide the "Initial Version" list back to the agent as its current set of primary tasks.
For charting, clarify your preference:
"For the 'Initial Version,' let's prioritize getting static Matplotlib charts working reliably on the web results page and in the PDF. We can then iterate to implement the full interactive Plotly.js component from the specification you were given."
OR "Based on your feedback, if you are confident in implementing the interactive Plotly.js charts (as per the detailed component specification) for the web results page in this 'Initial Version,' please proceed. Ensure the Python backend prepares data in the exact pumpRecommendation format."
For progressive reveal on the input form:
"For the 'Initial Version,' a single-page input form with logically grouped sections is acceptable. If you can implement simple JavaScript-based progressive reveal (e.g., showing/hiding sections with 'Next' buttons), that would be a bonus."
Regular Check-ins: If the agent can provide updates after completing sub-tasks (e.g., "Data parsing module complete," "Flask routes for input and basic results are set up"), it allows for course correction.