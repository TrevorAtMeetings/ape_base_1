Recommended Refactoring: The "Brain-Only" api.py
Here is a conceptual rewrite of the most important function, get_chart_data, to show how it should look after the legacy code is properly decommissioned.
Current State (Bloated and Contradictory):
code
Python
@api_bp.route('/chart_data/<path:pump_code>')
def get_chart_data(pump_code):
    # ...
    # Brain is now always active
    use_brain = BRAIN_AVAILABLE
    
    if use_brain:
        try:
            # Generate chart data using Brain
            brain_chart_data = generate_brain_chart_data(...)
            if brain_chart_data:
                # Active mode - return Brain results
                return make_response(...)
        except Exception:
            # Fall back to legacy method
            pass
            
    # HUNDREDS of lines of legacy code still exist here as a "fallback"
    # This is where the old logic for transformations, etc., lives.
    # ...
    # ...
    return make_response(...) # Returns legacy data
Refactored State (Clean, Simple, Brain-Only):
code
Python
@api_bp.route('/chart_data/<path:pump_code>')
def get_chart_data(pump_code):
    """
    API endpoint to get chart data for interactive Plotly.js charts.
    Powered exclusively by the Brain system.
    """
    try:
        flow_rate = request.args.get('flow', type=float, default=100)
        head = request.args.get('head', type=float, default=50)

        if not BRAIN_AVAILABLE:
            logger.error("Chart API call failed: Brain system is not available.")
            return jsonify({'error': 'The intelligence engine is currently offline.'}), 503

        # Directly call the Brain's chart generation function. This is now the ONLY path.
        chart_data = generate_brain_chart_data(pump_code, flow_rate, head)

        if not chart_data:
            logger.warning(f"Brain could not generate chart data for pump {pump_code} at the given duty point.")
            return jsonify({'error': f'No valid performance data could be generated for pump {pump_code}.'}), 404

        # The Brain has provided the complete, correct data. Send it to the user.
        response = make_response(json.dumps(chart_data))
        response.headers['Content-Type'] = 'application/json'
        response.headers['Cache-Control'] = 'public, max-age=300' # 5 minute cache
        return response

    except Exception as e:
        logger.error(f"An unhandled error occurred in get_chart_data: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({'error': 'An internal server error occurred.'}), 500
Summary of Recommendations
Fix Syntax Errors: Perform a full pass of the file to correct all syntax errors, especially unmatched quotes.
Aggressively Decommission: Delete the large blocks of legacy code from get_chart_data, get_chart_data_safe, get_pumps, and select_pump. These functions should be reduced to simple, direct calls to the Brain.
Remove Redundancy: Delete the /chart_data_safe route entirely.
Modernize Autocomplete: Update the frontend to use the /pumps/search endpoint for autocomplete functionality and remove the now-obsolete get_pump_list endpoint.
Simplify generate_brain_chart_data: The generate_brain_chart_data function itself contains logic to apply affinity laws. This logic should ideally live within the Brain's PerformanceAnalyzer module, not in the API routes file. The API route should just orchestrate calls to the Brain, not perform complex calculations itself.
By implementing these changes, this file will align perfectly with your new architecture, becoming a lean and efficient interface to the powerful, centralized Brain.