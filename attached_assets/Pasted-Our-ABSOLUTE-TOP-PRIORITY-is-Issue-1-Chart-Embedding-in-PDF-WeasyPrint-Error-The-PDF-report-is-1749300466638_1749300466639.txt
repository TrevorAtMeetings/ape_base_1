Our ABSOLUTE TOP PRIORITY is: Issue #1: Chart Embedding in PDF (WeasyPrint Error). The PDF report is a critical output, and the charts are essential.
Build System Instructions (Reminder):
Use best practices.
Please stop after completing all objectives for the current task and wait for me to review and approve before moving on.
If you run into new, unexpected critical issues, provide feedback immediately.
Focus only on the objectives for the current task.
If anything is unclear, ask for clarification.
Task 1: Fix PDF Chart Embedding (Issue #1 - CRITICAL)
Objective: Ensure all four Matplotlib performance charts (Head, Efficiency, Power, NPSH) are correctly generated as valid images and successfully embedded and displayed in the PDF report for the selected pump.
Agent's Finding: ERROR:weasyprint:Failed to load image at 'data:image/svg+xml;base64,': ParseError: no element found... and hypothesis that _generate_performance_chart_base64() might be returning an empty string.
Specific Actions for Agent:
Investigate _generate_performance_chart_base64() (or its equivalent in generate_pump_charts in app/routes.py or pump_engine.py):
Add detailed logging inside this function just before it returns the base64 string. Log whether the BytesIO buffer has content (e.g., buffer.getbuffer().nbytes). Log a snippet of the base64 string itself (e.g., the first 50 characters) to confirm it's not empty.
Ensure plt.savefig(buffer, format='png', dpi=150, bbox_inches='tight') (or 'svg' if you are intentionally using SVG, though PNG is often more straightforward for WeasyPrint embedding via base64) is executing without error.
Ensure plt.close(fig) is being called after saving to the buffer to free up memory and finalize the plot.
If the function is returning an empty string or an invalid base64 string (e.g., just data:image/png;base64,), this is the root cause. The Matplotlib plotting itself might be failing silently within that function.
Ensure Real Data for Plotting: Confirm that the chart generation function is receiving and attempting to plot the actual curve data from parsed_pump_obj.curves and the actual calculated operating point. If this data is empty or None, Matplotlib might produce an empty plot, leading to an empty base64 string.
NPSH Chart Graceful Handling: If a pump has no valid NPSH data (like "6 K 6 VANE" or "5 K"), this chart function should ideally return None or a specific "no data" indicator for its base64 string. The template ape_report_template.html should then conditionally omit rendering the <img> tag for the NPSH chart or show a "Data Not Available" text.
Verify Base64 Encoding: Ensure the base64 encoding (base64.b64encode(buffer.getvalue()).decode('utf-8')) is correct.
Template Side (ape_report_template.html): Confirm the <img> tag is correctly formed: src="data:image/png;base64,{{ chart_base64_string_variable }}". If you switched to SVG, it would be data:image/svg+xml;base64,.... (The error mentions svg+xml, so check the format in plt.savefig).
Expected Outcome: PDF report for "6/8 ALE" (Flow=342, Head=27.4) shows all four charts correctly. PDF report for "6 K 6 VANE" shows Head, Efficiency, Power charts correctly, and either omits the NPSH chart or displays a "NPSH Data Not Available" message.
Once Task 1 is complete and validated by me, we will proceed with the other issues.