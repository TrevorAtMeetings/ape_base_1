{
  "hardcoded_values": {
    "ai_analysis_constants": [
      {
        "value": "gpt-3.5-turbo",
        "source_file": "ai_analysis.py",
        "description": "OpenAI model for AI analysis",
        "constant": "openai_model_for_ai_analysis"
      },
      {
        "value": 500,
        "source_file": "ai_analysis.py",
        "description": "Maximum tokens for AI response",
        "constant": "maximum_tokens_for_ai_response"
      },
      {
        "value": 0.3,
        "source_file": "ai_analysis.py",
        "description": "Temperature setting for AI model consistency",
        "constant": "temperature_setting_for_ai_model_consistency"
      },
      {
        "value": 300,
        "source_file": "ai_analysis.py",
        "description": "Word limit for general analysis responses",
        "constant": "word_limit_for_general_analysis_responses"
      },
      {
        "value": "gemini-1.5-flash",
        "source_file": "ai_analysis.py",
        "description": "Google Gemini model for analysis",
        "constant": "google_gemini_model_for_analysis"
      },
      {
        "value": 80.0,
        "source_file": "ai_analysis.py",
        "description": "Excellent efficiency threshold",
        "constant": "excellent_efficiency_threshold"
      },
      {
        "value": 75.0,
        "source_file": "ai_analysis.py",
        "description": "Good efficiency threshold",
        "constant": "good_efficiency_threshold"
      },
      {
        "value": 65.0,
        "source_file": "ai_analysis.py",
        "description": "Adequate efficiency threshold",
        "constant": "adequate_efficiency_threshold"
      },
      {
        "value": 200,
        "source_file": "ai_analysis.py",
        "description": "Word limit for efficiency analysis responses",
        "constant": "word_limit_for_efficiency_analysis_responses"
      },
      {
        "value": 250,
        "source_file": "ai_analysis.py",
        "description": "Word limit for application analysis responses",
        "constant": "word_limit_for_application_analysis_responses"
      },
      {
        "value": 200,
        "source_file": "ai_analysis.py",
        "description": "Word limit for other topic analysis responses",
        "constant": "word_limit_for_other_topic_analysis_responses"
      },
      {
        "value": 0.5,
        "source_file": "ai_analysis.py",
        "description": "Power density threshold for acceptable ranges (kW per m³/hr)",
        "constant": "power_density_threshold_for_acceptable_ranges_kw_per_m3hr"
      },
      {
        "value": 1.0,
        "source_file": "ai_analysis.py",
        "description": "Power density threshold for moderate ranges (kW per m³/hr)",
        "constant": "power_density_threshold_for_moderate_ranges_kw_per_m3hr"
      },
      {
        "value": 80.0,
        "source_file": "ai_analysis.py",
        "description": "Efficiency threshold for energy-conscious applications",
        "constant": "efficiency_threshold_for_energy_conscious_applications"
      },
      {
        "value": 70.0,
        "source_file": "ai_analysis.py",
        "description": "Efficiency threshold for standard applications",
        "constant": "efficiency_threshold_for_standard_applications"
      },
      {
        "value": 75.0,
        "source_file": "ai_analysis.py",
        "description": "Efficiency threshold for maintenance recommendations",
        "constant": "efficiency_threshold_for_maintenance_recommendations"
      },
      {
        "value": 0,
        "source_file": "ai_analysis.py",
        "description": "Minimum flow threshold for validation",
        "constant": "minimum_flow_threshold"
      },
      {
        "value": 0,
        "source_file": "ai_analysis.py",
        "description": "Minimum head threshold for validation",
        "constant": "minimum_head_threshold"
      },
      {
        "value": 0,
        "source_file": "ai_analysis.py",
        "description": "Default power density fallback value",
        "constant": "default_power_density"
      }
    ],
    "ai_analyst_constants": [
      {
        "value": "gpt-4o",
        "source_file": "ai_analyst.py",
        "description": "OpenAI model for calibration analysis",
        "constant": "openai_model_for_calibration_analysis"
      },
      {
        "value": 0.3,
        "source_file": "ai_analyst.py",
        "description": "Lower temperature for consistent technical analysis",
        "constant": "lower_temperature_for_consistent_technical_analysis"
      },
      {
        "value": 1000,
        "source_file": "ai_analyst.py",
        "description": "Maximum tokens for calibration insights",
        "constant": "maximum_tokens_for_calibration_insights"
      },
      {
        "value": 3,
        "source_file": "ai_analyst.py",
        "description": "Significant deviation threshold for calibration adjustment",
        "constant": "significant_deviation_threshold_for_calibration_adjustment"
      },
      {
        "value": 10,
        "source_file": "ai_analyst.py",
        "description": "Divisor for efficiency correction exponent calculation",
        "constant": "divisor_for_efficiency_correction_exponent_calculation"
      },
      {
        "value": 98,
        "source_file": "ai_analyst.py",
        "description": "Excellent accuracy threshold percentage",
        "constant": "excellent_accuracy_threshold_percentage"
      },
      {
        "value": 95,
        "source_file": "ai_analyst.py",
        "description": "Good accuracy threshold percentage",
        "constant": "good_accuracy_threshold_percentage"
      },
      {
        "value": 2,
        "source_file": "ai_analyst.py",
        "description": "Consistent prediction deviation threshold",
        "constant": "consistent_prediction_deviation_threshold"
      },
      {
        "value": 5,
        "source_file": "ai_analyst.py",
        "description": "High RMSE variation threshold",
        "constant": "high_rmse_variation_threshold"
      },
      {
        "value": 5,
        "source_file": "ai_analyst.py",
        "description": "Threshold for recommending physics model review",
        "constant": "threshold_for_recommending_physics_model_review"
      },
      {
        "value": 75,
        "source_file": "ai_analyst.py",
        "description": "Excellent pump efficiency threshold for analysis",
        "constant": "excellent_pump_efficiency_threshold_for_analysis"
      },
      {
        "value": 65,
        "source_file": "ai_analyst.py",
        "description": "Good pump efficiency threshold for analysis",
        "constant": "good_pump_efficiency_threshold_for_analysis"
      },
      {
        "value": 55,
        "source_file": "ai_analyst.py",
        "description": "Acceptable pump efficiency threshold for analysis",
        "constant": "acceptable_pump_efficiency_threshold_for_analysis"
      },
      {
        "value": 110,
        "source_file": "ai_analyst.py",
        "description": "QBP threshold for operating close to BEP",
        "constant": "qbp_threshold_for_operating_close_to_bep"
      },
      {
        "value": 130,
        "source_file": "ai_analyst.py",
        "description": "QBP threshold for reasonably close to BEP",
        "constant": "qbp_threshold_for_reasonably_close_to_bep"
      }
    ],
    "performance_affinity_constants": [
      {
        "value": 40.0,
        "source_file": "performance_affinity.py",
        "description": "Minimum acceptable pump efficiency percentage",
        "constant": "minimum_acceptable_pump_efficiency_percentage"
      },
      {
        "value": 85.0,
        "source_file": "performance_affinity.py",
        "description": "Industry standard minimum trim percentage (15% max trim)",
        "constant": "industry_standard_minimum_trim_percentage_15_max_trim"
      },
      {
        "value": 100.0,
        "source_file": "performance_affinity.py",
        "description": "Maximum trim percentage (full impeller)",
        "constant": "maximum_trim_percentage_full_impeller"
      },
      {
        "value": 1.0,
        "source_file": "performance_affinity.py",
        "description": "Flow scaling exponent in affinity laws (Q2/Q1 = (D2/D1)^1)",
        "constant": "flow_scaling_exponent_in_affinity_laws_q2_q1__d2_d11"
      },
      {
        "value": 2.0,
        "source_file": "performance_affinity.py",
        "description": "Head scaling exponent in affinity laws (H2/H1 = (D2/D1)^2)",
        "constant": "head_scaling_exponent_in_affinity_laws_h2_h1__d2_d12"
      },
      {
        "value": 3.0,
        "source_file": "performance_affinity.py",
        "description": "Power scaling exponent in affinity laws (P2/P1 = (D2/D1)^3)",
        "constant": "power_scaling_exponent_in_affinity_laws_p2_p1__d2_d13"
      },
      {
        "value": 0.8,
        "source_file": "performance_affinity.py",
        "description": "Efficiency scaling exponent in affinity laws",
        "constant": "efficiency_scaling_exponent_in_affinity_laws"
      },
      {
        "value": 1.2,
        "source_file": "performance_affinity.py",
        "description": "BEP shift flow exponent calibration factor",
        "constant": "bep_shift_flow_exponent_calibration_factor"
      },
      {
        "value": 2.2,
        "source_file": "performance_affinity.py",
        "description": "BEP shift head exponent calibration factor",
        "constant": "bep_shift_head_exponent_calibration_factor"
      },
      {
        "value": 2.9,
        "source_file": "performance_affinity.py",
        "description": "Trim dependent small exponent",
        "constant": "trim_dependent_small_exponent"
      },
      {
        "value": 2.1,
        "source_file": "performance_affinity.py",
        "description": "Trim dependent large exponent",
        "constant": "trim_dependent_large_exponent"
      },
      {
        "value": 0.2,
        "source_file": "performance_affinity.py",
        "description": "Efficiency penalty factor for volute pumps",
        "constant": "efficiency_penalty_factor_for_volute_pumps"
      },
      {
        "value": 0.45,
        "source_file": "performance_affinity.py",
        "description": "Efficiency penalty factor for diffuser pumps",
        "constant": "efficiency_penalty_factor_for_diffuser_pumps"
      },
      {
        "value": 10.0,
        "source_file": "performance_affinity.py",
        "description": "NPSH degradation threshold percentage",
        "constant": "npsh_degradation_threshold_percentage"
      },
      {
        "value": 1.15,
        "source_file": "performance_affinity.py",
        "description": "NPSH degradation factor for heavy trimming",
        "constant": "npsh_degradation_factor_for_heavy_trimming"
      },
      {
        "value": 1000,
        "source_file": "performance_affinity.py",
        "description": "Water density (kg/m³)",
        "constant": "water_density_kg_m_"
      },
      {
        "value": 9.81,
        "source_file": "performance_affinity.py",
        "description": "Gravitational acceleration (m/s²)",
        "constant": "gravitational_acceleration_m_s"
      },
      {
        "value": 3600,
        "source_file": "performance_affinity.py",
        "description": "Seconds per hour for flow conversions",
        "constant": "seconds_per_hour_for_flow_conversions"
      },
      {
        "value": 0.7,
        "source_file": "performance_affinity.py",
        "description": "Fallback minimum diameter ratio when no specifications available",
        "constant": "fallback_minimum_diameter_ratio_when_no_specifications_available"
      },
      {
        "value": 1.15,
        "source_file": "performance_affinity.py",
        "description": "Fallback maximum diameter ratio when no specifications available",
        "constant": "fallback_maximum_diameter_ratio_when_no_specifications_available"
      },
      {
        "value": 75.0,
        "source_file": "performance_affinity.py",
        "description": "Default base efficiency when interpolation unavailable",
        "constant": "default_base_efficiency_when_interpolation_unavailable"
      },
      {
        "value": 0.85,
        "source_file": "performance_affinity.py",
        "description": "Trim ratio threshold for efficiency degradation (15% trim)",
        "constant": "trim_ratio_threshold_for_efficiency_degradation_15_trim"
      },
      {
        "value": 20,
        "source_file": "performance_affinity.py",
        "description": "Efficiency penalty multiplier for excessive trimming",
        "constant": "efficiency_penalty_multiplier_for_excessive_trimming"
      },
      {
        "value": 40,
        "source_file": "performance_affinity.py",
        "description": "Minimum efficiency floor after trim penalty",
        "constant": "minimum_efficiency_floor_after_trim_penalty"
      },
      {
        "value": 30,
        "source_file": "performance_affinity.py",
        "description": "Absolute minimum efficiency floor",
        "constant": "absolute_minimum_efficiency_floor"
      },
      {
        "value": 0.5,
        "source_file": "performance_affinity.py",
        "description": "Minimum flow tolerance multiplier (50% below minimum)",
        "constant": "minimum_flow_tolerance_multiplier_50_below_minimum"
      },
      {
        "value": 1.5,
        "source_file": "performance_affinity.py",
        "description": "Maximum flow tolerance multiplier (50% above maximum)",
        "constant": "maximum_flow_tolerance_multiplier_50_above_maximum"
      },
      {
        "value": 75,
        "source_file": "performance_affinity.py",
        "description": "Default BEP efficiency for estimation",
        "constant": "default_bep_efficiency_for_estimation"
      },
      {
        "value": 0.7,
        "source_file": "performance_affinity.py",
        "description": "Lower flow ratio boundary for good efficiency",
        "constant": "lower_flow_ratio_boundary_for_good_efficiency"
      },
      {
        "value": 1.2,
        "source_file": "performance_affinity.py",
        "description": "Upper flow ratio boundary for good efficiency",
        "constant": "upper_flow_ratio_boundary_for_good_efficiency"
      },
      {
        "value": 0.1,
        "source_file": "performance_affinity.py",
        "description": "Efficiency reduction factor per unit flow ratio deviation",
        "constant": "efficiency_reduction_factor_per_unit_flow_ratio_deviation"
      },
      {
        "value": 0.85,
        "source_file": "performance_affinity.py",
        "description": "Efficiency multiplier for significant off-BEP operation",
        "constant": "efficiency_multiplier_for_significant_off_bep_operation"
      },
      {
        "value": 10,
        "source_file": "performance_affinity.py",
        "description": "Flow proximity threshold for NPSH lookup (m³/hr)",
        "constant": "flow_proximity_threshold_for_npsh_lookup_m3hr"
      },
      {
        "value": 0.9,
        "source_file": "performance_affinity.py",
        "description": "Lower flow range tolerance for interpolation",
        "constant": "lower_flow_range_tolerance_for_interpolation"
      },
      {
        "value": 1.1,
        "source_file": "performance_affinity.py",
        "description": "Upper flow range tolerance for interpolation",
        "constant": "upper_flow_range_tolerance_for_interpolation"
      },
      {
        "value": 1.05,
        "source_file": "performance_affinity.py",
        "description": "BEP precision tolerance for head comparison",
        "constant": "bep_precision_tolerance_for_head_comparison"
      },
      {
        "value": 1.02,
        "source_file": "performance_affinity.py",
        "description": "Head safety margin for BEP calculations",
        "constant": "head_safety_margin_for_bep_calculations"
      },
      {
        "value": 0.5,
        "source_file": "performance_affinity.py",
        "description": "Exponent for trim percentage estimation",
        "constant": "exponent_for_trim_percentage_estimation"
      },
      {
        "value": 5.0,
        "source_file": "performance_affinity.py",
        "description": "Small trim threshold percentage",
        "constant": "small_trim_threshold_percentage"
      },
      {
        "value": 2.9,
        "source_file": "performance_affinity.py",
        "description": "Default small trim head exponent",
        "constant": "default_small_trim_head_exponent"
      },
      {
        "value": 2.1,
        "source_file": "performance_affinity.py",
        "description": "Default large trim head exponent",
        "constant": "default_large_trim_head_exponent"
      },
      {
        "value": 1.0,
        "source_file": "performance_affinity.py",
        "description": "Error percent threshold for validation warning",
        "constant": "error_percent_threshold_for_validation_warning"
      },
      {
        "value": 70.0,
        "source_file": "performance_affinity.py",
        "description": "Fill value for efficiency interpolation",
        "constant": "fill_value_for_efficiency_interpolation"
      },
      {
        "value": 100,
        "source_file": "performance_affinity.py",
        "description": "Percentage conversion factor",
        "constant": "percentage_conversion_factor"
      },
      {
        "value": 1000,
        "source_file": "performance_affinity.py",
        "description": "Watts to kilowatts conversion factor",
        "constant": "watts_to_kilowatts_conversion_factor"
      }
    ],
    "performance_curves_constants": [
      {
        "value": 40.0,
        "source_file": "performance_curves.py",
        "description": "Minimum acceptable pump efficiency percentage",
        "constant": "minimum_acceptable_pump_efficiency_percentage"
      },
      {
        "value": 85.0,
        "source_file": "performance_curves.py",
        "description": "Industry standard minimum trim percentage (15% max trim)",
        "constant": "industry_standard_minimum_trim_percentage_15_max_trim"
      },
      {
        "value": 100.0,
        "source_file": "performance_curves.py",
        "description": "Maximum trim percentage (full impeller)",
        "constant": "maximum_trim_percentage_full_impeller"
      },
      {
        "value": 0.9,
        "source_file": "performance_curves.py",
        "description": "Flow range minimum tolerance factor (90%)",
        "constant": "flow_range_minimum_tolerance_factor_90"
      },
      {
        "value": 1.1,
        "source_file": "performance_curves.py",
        "description": "Flow range maximum tolerance factor (110%)",
        "constant": "flow_range_maximum_tolerance_factor_110"
      },
      {
        "value": 0.98,
        "source_file": "performance_curves.py",
        "description": "Minimum head requirement factor (98%)",
        "constant": "minimum_head_requirement_factor_98"
      },
      {
        "value": 1.1,
        "source_file": "performance_curves.py",
        "description": "Maximum preferred head factor (110%)",
        "constant": "maximum_preferred_head_factor_110"
      },
      {
        "value": 0.7,
        "source_file": "performance_curves.py",
        "description": "Head match bonus factor (30% bonus)",
        "constant": "head_match_bonus_factor_30_bonus"
      },
      {
        "value": 70.0,
        "source_file": "performance_curves.py",
        "description": "Conservative fallback efficiency percentage",
        "constant": "conservative_fallback_efficiency_percentage"
      },
      {
        "value": 1000,
        "source_file": "performance_curves.py",
        "description": "Water density (kg/m³)",
        "constant": "water_density_kgm3"
      },
      {
        "value": 9.81,
        "source_file": "performance_curves.py",
        "description": "Gravitational acceleration (m/s²)",
        "constant": "gravitational_acceleration_ms2"
      },
      {
        "value": 3600,
        "source_file": "performance_curves.py",
        "description": "Seconds per hour for flow conversions",
        "constant": "seconds_per_hour_for_flow_conversions"
      },
      {
        "value": 2,
        "source_file": "performance_curves.py",
        "description": "Minimum number of curve points required for interpolation",
        "constant": "minimum_number_of_curve_points_required_for_interpolation"
      },
      {
        "value": 0.98,
        "source_file": "performance_curves.py",
        "description": "Hard-coded head requirement factor for validation",
        "constant": "hard_coded_head_requirement_factor_for_validation"
      },
      {
        "value": 100,
        "source_file": "performance_curves.py",
        "description": "Percentage conversion factor",
        "constant": "percentage_conversion_factor"
      },
      {
        "value": 1000,
        "source_file": "performance_curves.py",
        "description": "Watts to kilowatts conversion factor",
        "constant": "watts_to_kilowatts_conversion_factor"
      },
      {
        "value": 0.0,
        "source_file": "performance_curves.py",
        "description": "Default power value when none available",
        "constant": "default_power_value_when_none_available"
      },
      {
        "value": 100.0,
        "source_file": "performance_curves.py",
        "description": "Full impeller trim percentage (no trimming)",
        "constant": "full_impeller_trim_percentage_no_trimming"
      }
    ],
    "physics_models_constants": [
      {
        "value": 0.95,
        "source_file": "physics_models.py",
        "description": "Axial flow pump flow exponent",
        "category": "pump_type_physics"
      },
      {
        "value": 1.65,
        "source_file": "physics_models.py",
        "description": "Axial flow pump head exponent",
        "category": "pump_type_physics"
      },
      {
        "value": 2.6,
        "source_file": "physics_models.py",
        "description": "Axial flow pump power exponent",
        "category": "pump_type_physics"
      },
      {
        "value": 1.7,
        "source_file": "physics_models.py",
        "description": "Axial flow pump NPSH exponent",
        "category": "pump_type_physics"
      },
      {
        "value": 1.0,
        "source_file": "physics_models.py",
        "description": "End suction pump flow exponent",
        "category": "pump_type_physics"
      },
      {
        "value": 1.95,
        "source_file": "physics_models.py",
        "description": "End suction pump head exponent",
        "category": "pump_type_physics"
      },
      {
        "value": 2.93,
        "source_file": "physics_models.py",
        "description": "End suction pump power exponent",
        "category": "pump_type_physics"
      },
      {
        "value": 1.95,
        "source_file": "physics_models.py",
        "description": "End suction pump NPSH exponent",
        "category": "pump_type_physics"
      },
      {
        "value": 1.0,
        "source_file": "physics_models.py",
        "description": "Horizontal split case pump flow exponent",
        "category": "pump_type_physics"
      },
      {
        "value": 2.01,
        "source_file": "physics_models.py",
        "description": "Horizontal split case pump head exponent",
        "category": "pump_type_physics"
      },
      {
        "value": 3.0,
        "source_file": "physics_models.py",
        "description": "Horizontal split case pump power exponent",
        "category": "pump_type_physics"
      },
      {
        "value": 2.0,
        "source_file": "physics_models.py",
        "description": "Horizontal split case pump NPSH exponent",
        "category": "pump_type_physics"
      },
      {
        "value": 1.0,
        "source_file": "physics_models.py",
        "description": "Multi-stage pump flow exponent",
        "category": "pump_type_physics"
      },
      {
        "value": 1.97,
        "source_file": "physics_models.py",
        "description": "Multi-stage pump head exponent",
        "category": "pump_type_physics"
      },
      {
        "value": 2.95,
        "source_file": "physics_models.py",
        "description": "Multi-stage pump power exponent",
        "category": "pump_type_physics"
      },
      {
        "value": 2.0,
        "source_file": "physics_models.py",
        "description": "Multi-stage pump NPSH exponent",
        "category": "pump_type_physics"
      },
      {
        "value": 0.97,
        "source_file": "physics_models.py",
        "description": "Vertical turbine pump flow exponent",
        "category": "pump_type_physics"
      },
      {
        "value": 1.85,
        "source_file": "physics_models.py",
        "description": "Vertical turbine pump head exponent",
        "category": "pump_type_physics"
      },
      {
        "value": 2.8,
        "source_file": "physics_models.py",
        "description": "Vertical turbine pump power exponent",
        "category": "pump_type_physics"
      },
      {
        "value": 1.8,
        "source_file": "physics_models.py",
        "description": "Vertical turbine pump NPSH exponent",
        "category": "pump_type_physics"
      },
      {
        "value": 1.0,
        "source_file": "physics_models.py",
        "description": "Default pump flow exponent (standard affinity law)",
        "category": "pump_type_physics"
      },
      {
        "value": 2.0,
        "source_file": "physics_models.py",
        "description": "Default pump head exponent (standard affinity law)",
        "category": "pump_type_physics"
      },
      {
        "value": 3.0,
        "source_file": "physics_models.py",
        "description": "Default pump power exponent (standard affinity law)",
        "category": "pump_type_physics"
      },
      {
        "value": 2.0,
        "source_file": "physics_models.py",
        "description": "Default pump NPSH exponent (standard affinity law)",
        "category": "pump_type_physics"
      }
    ],
    "validation_constants": [
      {
        "value": 0.227124,
        "source_file": "validation.py",
        "description": "GPM to m³/hr conversion factor",
        "constant": "gpm_to_m³_hr_conversion_factor"
      },
      {
        "value": 3.6,
        "source_file": "validation.py",
        "description": "LPS to m³/hr conversion factor",
        "constant": "lps_to_m³_hr_conversion_factor"
      },
      {
        "value": 0.06,
        "source_file": "validation.py",
        "description": "LPM to m³/hr conversion factor",
        "constant": "lpm_to_m³_hr_conversion_factor"
      },
      {
        "value": 157.725,
        "source_file": "validation.py",
        "description": "MGD to m³/hr conversion factor",
        "constant": "mgd_to_m³_hr_conversion_factor"
      },
      {
        "value": 0.3048,
        "source_file": "validation.py",
        "description": "Feet to meters conversion factor",
        "constant": "feet_to_meters_conversion_factor"
      },
      {
        "value": 0.70307,
        "source_file": "validation.py",
        "description": "PSI to meters conversion factor",
        "constant": "psi_to_meters_conversion_factor"
      },
      {
        "value": 10.1972,
        "source_file": "validation.py",
        "description": "Bar to meters conversion factor",
        "constant": "bar_to_meters_conversion_factor"
      },
      {
        "value": 0.101972,
        "source_file": "validation.py",
        "description": "kPa to meters conversion factor",
        "constant": "kpa_to_meters_conversion_factor"
      },
      {
        "value": 0.745699872,
        "source_file": "validation.py",
        "description": "Horsepower to kW conversion factor",
        "constant": "horsepower_to_kw_conversion_factor"
      },
      {
        "value": 0.001,
        "source_file": "validation.py",
        "description": "Watts to kW conversion factor",
        "constant": "watts_to_kw_conversion_factor"
      },
      {
        "value": 25.4,
        "source_file": "validation.py",
        "description": "Inches to mm conversion factor",
        "constant": "inches_to_mm_conversion_factor"
      },
      {
        "value": 10,
        "source_file": "validation.py",
        "description": "Centimeters to millimeters conversion factor",
        "constant": "centimeters_to_millimeters_conversion_factor"
      },
      {
        "value": 1000,
        "source_file": "validation.py",
        "description": "Meters to millimeters conversion factor",
        "constant": "meters_to_millimeters_conversion_factor"
      },
      {
        "value": 0.1,
        "source_file": "validation.py",
        "description": "Minimum valid flow rate (m³/hr)",
        "constant": "minimum_valid_flow_rate_m³_hr"
      },
      {
        "value": 50000,
        "source_file": "validation.py",
        "description": "Maximum valid flow rate (m³/hr)",
        "constant": "maximum_valid_flow_rate_m³_hr"
      },
      {
        "value": 0.1,
        "source_file": "validation.py",
        "description": "Minimum valid head (m)",
        "constant": "minimum_valid_head_m"
      },
      {
        "value": 5000,
        "source_file": "validation.py",
        "description": "Maximum valid head (m)",
        "constant": "maximum_valid_head_m"
      },
      {
        "value": 10000,
        "source_file": "validation.py",
        "description": "Maximum valid power (kW)",
        "constant": "maximum_valid_power_kw"
      },
      {
        "value": 100,
        "source_file": "validation.py",
        "description": "Maximum valid NPSH (m)",
        "constant": "maximum_valid_npsh_m"
      },
      {
        "value": 50,
        "source_file": "validation.py",
        "description": "Minimum impeller diameter (mm)",
        "constant": "minimum_impeller_diameter_mm"
      },
      {
        "value": 5000,
        "source_file": "validation.py",
        "description": "Maximum impeller diameter (mm)",
        "constant": "maximum_impeller_diameter_mm"
      },
      {
        "value": 100,
        "source_file": "validation.py",
        "description": "Minimum pump speed (RPM)",
        "constant": "minimum_pump_speed_rpm"
      },
      {
        "value": 7200,
        "source_file": "validation.py",
        "description": "Maximum pump speed (RPM)",
        "constant": "maximum_pump_speed_rpm"
      },
      {
        "value": 10,
        "source_file": "validation.py",
        "description": "Minimum specific speed threshold",
        "constant": "minimum_specific_speed_threshold"
      },
      {
        "value": 10000,
        "source_file": "validation.py",
        "description": "Maximum specific speed threshold",
        "constant": "maximum_specific_speed_threshold"
      },
      {
        "value": 3,
        "source_file": "validation.py",
        "description": "Minimum curve points for interpolation",
        "constant": "minimum_curve_points_for_interpolation"
      },
      {
        "value": 2,
        "source_file": "validation.py",
        "description": "Curve validation divisor",
        "constant": "curve_validation_divisor"
      },
      {
        "value": 50,
        "source_file": "validation.py",
        "description": "Minimum data quality score for validity",
        "constant": "minimum_data_quality_score_for_validity"
      },
      {
        "value": 100,
        "source_file": "validation.py",
        "description": "Initial data quality score",
        "constant": "initial_data_quality_score"
      },
      {
        "value": 20,
        "source_file": "validation.py",
        "description": "Quality score penalty for missing required fields",
        "constant": "quality_score_penalty_for_missing_required_fields"
      },
      {
        "value": 10,
        "source_file": "validation.py",
        "description": "Quality score penalty for missing specifications",
        "constant": "quality_score_penalty_for_missing_specifications"
      },
      {
        "value": 15,
        "source_file": "validation.py",
        "description": "Quality score penalty for missing BEP data",
        "constant": "quality_score_penalty_for_missing_bep_data"
      },
      {
        "value": 10,
        "source_file": "validation.py",
        "description": "Quality score penalty for missing impeller range",
        "constant": "quality_score_penalty_for_missing_impeller_range"
      },
      {
        "value": 20,
        "source_file": "validation.py",
        "description": "Quality score penalty for insufficient valid curves",
        "constant": "quality_score_penalty_for_insufficient_valid_curves"
      },
      {
        "value": 5,
        "source_file": "validation.py",
        "description": "Quality score penalty for outliers",
        "constant": "quality_score_penalty_for_outliers"
      },
      {
        "value": 0,
        "source_file": "validation.py",
        "description": "Minimum efficiency percentage",
        "constant": "minimum_efficiency_percentage"
      },
      {
        "value": 100,
        "source_file": "validation.py",
        "description": "Maximum efficiency percentage",
        "constant": "maximum_efficiency_percentage"
      },
      {
        "value": 0,
        "source_file": "validation.py",
        "description": "Minimum valid power (kW)",
        "constant": "minimum_valid_power_kw"
      },
      {
        "value": 0,
        "source_file": "validation.py",
        "description": "Minimum valid NPSHR (m)",
        "constant": "minimum_valid_npshr_m"
      },
      {
        "value": 3600,
        "source_file": "validation.py",
        "description": "Seconds per hour for flow conversions",
        "constant": "seconds_per_hour_for_flow_conversions"
      }
    ],
    "cache_constants": [
      {
        "value": 1000,
        "source_file": "cache.py",
        "description": "Maximum cache size (entries)",
        "constant": "maximum_cache_size_entries"
      },
      {
        "value": 300,
        "source_file": "cache.py",
        "description": "Default TTL for cache entries (seconds)",
        "constant": "default_ttl_for_cache_entries_seconds"
      },
      {
        "value": 100,
        "source_file": "cache.py",
        "description": "Percentage conversion factor for hit rate calculation",
        "constant": "percentage_conversion_factor_for_hit_rate"
      },
      {
        "value": 2,
        "source_file": "cache.py",
        "description": "Decimal places for rounding hit rate",
        "constant": "decimal_places_for_rounding_hit_rate"
      }
    ],
    "charts_constants": [
      {
        "value": 0.1,
        "source_file": "charts.py",
        "description": "Chart margin for web display (10%)",
        "category": "chart_display"
      },
      {
        "value": 0.15,
        "source_file": "charts.py",
        "description": "Chart margin for PDF reports (15%)",
        "category": "chart_display"
      },
      {
        "value": 0.12,
        "source_file": "charts.py",
        "description": "Chart margin for detailed reports (12%)",
        "category": "chart_display"
      }
    ],
    "hydraulic_classifier_constants": [
      {
        "value": 2960,
        "source_file": "hydraulic_classifier.py",
        "description": "Default pump speed for 2-pole motor at 50Hz (RPM)",
        "category": "hydraulic_defaults"
      },
      {
        "value": 3600,
        "source_file": "hydraulic_classifier.py",
        "description": "Seconds per hour conversion constant",
        "category": "hydraulic_calculations"
      },
      {
        "value": 30,
        "source_file": "hydraulic_classifier.py",
        "description": "Low specific speed threshold for radial pumps",
        "category": "hydraulic_classification"
      },
      {
        "value": 60,
        "source_file": "hydraulic_classifier.py",
        "description": "Mid specific speed threshold for radial pumps",
        "category": "hydraulic_classification"
      },
      {
        "value": 120,
        "source_file": "hydraulic_classifier.py",
        "description": "High specific speed threshold for mixed flow pumps",
        "category": "hydraulic_classification"
      },
      {
        "value": 0.85,
        "source_file": "hydraulic_classifier.py",
        "description": "Minimum trim ratio (15% maximum trim limit)",
        "category": "hydraulic_limits"
      },
      {
        "value": 0.75,
        "source_file": "hydraulic_classifier.py",
        "description": "Head exponent for specific speed calculation",
        "category": "specific_speed_calculation"
      },
      {
        "value": 0.5,
        "source_file": "hydraulic_classifier.py",
        "description": "Unknown type flow weight",
        "category": "unknown_type_parameters"
      },
      {
        "value": 0.5,
        "source_file": "hydraulic_classifier.py",
        "description": "Unknown type head weight",
        "category": "unknown_type_parameters"
      },
      {
        "value": 1.0,
        "source_file": "hydraulic_classifier.py",
        "description": "Unknown type trim flow exponent",
        "category": "unknown_type_parameters"
      },
      {
        "value": 2.0,
        "source_file": "hydraulic_classifier.py",
        "description": "Unknown type trim head exponent",
        "category": "unknown_type_parameters"
      },
      {
        "value": 0.1,
        "source_file": "hydraulic_classifier.py",
        "description": "Unknown type efficiency drop per percent trim",
        "category": "unknown_type_parameters"
      },
      {
        "value": 0.4,
        "source_file": "hydraulic_classifier.py",
        "description": "Radial low Ns flow weight",
        "category": "radial_low_parameters"
      },
      {
        "value": 0.6,
        "source_file": "hydraulic_classifier.py",
        "description": "Radial low Ns head weight",
        "category": "radial_low_parameters"
      },
      {
        "value": 1.0,
        "source_file": "hydraulic_classifier.py",
        "description": "Radial low Ns trim flow exponent",
        "category": "radial_low_parameters"
      },
      {
        "value": 2.0,
        "source_file": "hydraulic_classifier.py",
        "description": "Radial low Ns trim head exponent",
        "category": "radial_low_parameters"
      },
      {
        "value": 0.1,
        "source_file": "hydraulic_classifier.py",
        "description": "Radial low Ns efficiency drop per percent trim",
        "category": "radial_low_parameters"
      },
      {
        "value": 0.45,
        "source_file": "hydraulic_classifier.py",
        "description": "Radial mid Ns flow weight",
        "category": "radial_mid_parameters"
      },
      {
        "value": 0.55,
        "source_file": "hydraulic_classifier.py",
        "description": "Radial mid Ns head weight",
        "category": "radial_mid_parameters"
      },
      {
        "value": 1.0,
        "source_file": "hydraulic_classifier.py",
        "description": "Radial mid Ns trim flow exponent",
        "category": "radial_mid_parameters"
      },
      {
        "value": 1.95,
        "source_file": "hydraulic_classifier.py",
        "description": "Radial mid Ns trim head exponent",
        "category": "radial_mid_parameters"
      },
      {
        "value": 0.15,
        "source_file": "hydraulic_classifier.py",
        "description": "Radial mid Ns efficiency drop per percent trim",
        "category": "radial_mid_parameters"
      },
      {
        "value": 0.5,
        "source_file": "hydraulic_classifier.py",
        "description": "Mixed flow flow weight",
        "category": "mixed_flow_parameters"
      },
      {
        "value": 0.5,
        "source_file": "hydraulic_classifier.py",
        "description": "Mixed flow head weight",
        "category": "mixed_flow_parameters"
      },
      {
        "value": 0.97,
        "source_file": "hydraulic_classifier.py",
        "description": "Mixed flow trim flow exponent",
        "category": "mixed_flow_parameters"
      },
      {
        "value": 1.85,
        "source_file": "hydraulic_classifier.py",
        "description": "Mixed flow trim head exponent",
        "category": "mixed_flow_parameters"
      },
      {
        "value": 0.25,
        "source_file": "hydraulic_classifier.py",
        "description": "Mixed flow efficiency drop per percent trim",
        "category": "mixed_flow_parameters"
      },
      {
        "value": 0.55,
        "source_file": "hydraulic_classifier.py",
        "description": "Axial flow flow weight",
        "category": "axial_flow_parameters"
      },
      {
        "value": 0.45,
        "source_file": "hydraulic_classifier.py",
        "description": "Axial flow head weight",
        "category": "axial_flow_parameters"
      },
      {
        "value": 0.95,
        "source_file": "hydraulic_classifier.py",
        "description": "Axial flow trim flow exponent",
        "category": "axial_flow_parameters"
      },
      {
        "value": 1.65,
        "source_file": "hydraulic_classifier.py",
        "description": "Axial flow trim head exponent",
        "category": "axial_flow_parameters"
      },
      {
        "value": 0.35,
        "source_file": "hydraulic_classifier.py",
        "description": "Axial flow efficiency drop per percent trim",
        "category": "axial_flow_parameters"
      },
      {
        "value": 2.0,
        "source_file": "hydraulic_classifier.py",
        "description": "Default trim head exponent",
        "category": "trim_calculations"
      },
      {
        "value": 1.0,
        "source_file": "hydraulic_classifier.py",
        "description": "Default trim ratio (no trim)",
        "category": "trim_calculations"
      },
      {
        "value": 100,
        "source_file": "hydraulic_classifier.py",
        "description": "Percentage conversion factor",
        "category": "conversion_factors"
      }
    ],
    "proximity_searcher_constants": [
      {
        "value": 20000,
        "source_file": "proximity_searcher.py",
        "description": "Maximum realistic flow rate for centrifugal pumps",
        "category": "search_limits"
      },
      {
        "value": 2000,
        "source_file": "proximity_searcher.py",
        "description": "Maximum realistic head for centrifugal pumps",
        "category": "search_limits"
      },
      {
        "value": 20,
        "source_file": "proximity_searcher.py",
        "description": "Number of top pumps to return from proximity search",
        "category": "search_limits"
      },
      {
        "value": 30.0,
        "source_file": "proximity_searcher.py",
        "description": "Minimum realistic efficiency floor percentage",
        "category": "search_limits"
      },
      {
        "value": 10,
        "source_file": "proximity_searcher.py",
        "description": "Excellent proximity scoring threshold",
        "category": "proximity_scoring"
      },
      {
        "value": 25,
        "source_file": "proximity_searcher.py",
        "description": "Good proximity scoring threshold",
        "category": "proximity_scoring"
      },
      {
        "value": 50,
        "source_file": "proximity_searcher.py",
        "description": "Fair proximity scoring threshold",
        "category": "proximity_scoring"
      },
      {
        "value": 2960,
        "source_file": "proximity_searcher.py",
        "description": "Default 2-pole motor speed at 50Hz (RPM)",
        "category": "motor_defaults"
      },
      {
        "value": 2,
        "source_file": "proximity_searcher.py",
        "description": "Exponent for distance calculation (squared)",
        "category": "calculation_exponents"
      },
      {
        "value": 100,
        "source_file": "proximity_searcher.py",
        "description": "Percentage conversion factor",
        "category": "conversion_factors"
      },
      {
        "value": 95,
        "source_file": "proximity_searcher.py",
        "description": "Maximum realistic BEP efficiency percentage",
        "category": "efficiency_limits"
      },
      {
        "value": 1.0,
        "source_file": "proximity_searcher.py",
        "description": "Default trim ratio (no trim)",
        "category": "trim_defaults"
      },
      {
        "value": 100.0,
        "source_file": "proximity_searcher.py",
        "description": "Operating range score for radial pumps",
        "category": "operating_range_scores"
      },
      {
        "value": 60,
        "source_file": "proximity_searcher.py",
        "description": "Specific speed threshold for radial pumps",
        "category": "specific_speed_thresholds"
      },
      {
        "value": 120,
        "source_file": "proximity_searcher.py",
        "description": "Specific speed threshold for mixed flow pumps",
        "category": "specific_speed_thresholds"
      },
      {
        "value": 85.0,
        "source_file": "proximity_searcher.py",
        "description": "Operating range score for mixed flow pumps",
        "category": "operating_range_scores"
      },
      {
        "value": 70.0,
        "source_file": "proximity_searcher.py",
        "description": "Operating range score for axial pumps",
        "category": "operating_range_scores"
      }
    ],
    "pump_evaluator_constants": [
      {
        "value": 45,
        "source_file": "pump_evaluator.py",
        "description": "Maximum points for BEP proximity scoring",
        "category": "scoring_weights"
      },
      {
        "value": 35,
        "source_file": "pump_evaluator.py",
        "description": "Maximum points for efficiency scoring",
        "category": "scoring_weights"
      },
      {
        "value": 20,
        "source_file": "pump_evaluator.py",
        "description": "Maximum points for head margin scoring",
        "category": "scoring_weights"
      },
      {
        "value": 150.0,
        "source_file": "pump_evaluator.py",
        "description": "Head oversizing threshold percentage",
        "category": "scoring_thresholds"
      },
      {
        "value": 300.0,
        "source_file": "pump_evaluator.py",
        "description": "Severe head oversizing threshold percentage",
        "category": "scoring_thresholds"
      },
      {
        "value": 1.5,
        "source_file": "pump_evaluator.py",
        "description": "NPSH safety factor for required margin",
        "category": "scoring_thresholds"
      },
      {
        "value": 50.0,
        "source_file": "pump_evaluator.py",
        "description": "Minimum realistic QBP range percentage",
        "category": "scoring_thresholds"
      },
      {
        "value": 200.0,
        "source_file": "pump_evaluator.py",
        "description": "Maximum realistic QBP range percentage",
        "category": "scoring_thresholds"
      },
      {
        "value": 80,
        "source_file": "pump_evaluator.py",
        "description": "Preferred operating zone minimum QBP percentage",
        "category": "operating_zones"
      },
      {
        "value": 110,
        "source_file": "pump_evaluator.py",
        "description": "Preferred operating zone maximum QBP percentage",
        "category": "operating_zones"
      },
      {
        "value": 85,
        "source_file": "pump_evaluator.py",
        "description": "Excellent efficiency scoring threshold percentage",
        "category": "efficiency_scoring"
      },
      {
        "value": 75,
        "source_file": "pump_evaluator.py",
        "description": "Good efficiency scoring threshold percentage",
        "category": "efficiency_scoring"
      },
      {
        "value": 65,
        "source_file": "pump_evaluator.py",
        "description": "Fair efficiency scoring threshold percentage",
        "category": "efficiency_scoring"
      },
      {
        "value": 45,
        "source_file": "pump_evaluator.py",
        "description": "Poor efficiency scoring threshold percentage",
        "category": "efficiency_scoring"
      },
      {
        "value": 40,
        "source_file": "pump_evaluator.py",
        "description": "Minimum acceptable efficiency threshold percentage",
        "category": "efficiency_scoring"
      },
      {
        "value": 0,
        "source_file": "pump_evaluator.py",
        "description": "NPSH margin points (removed feature)",
        "category": "legacy_values"
      },
      {
        "value": 85.0,
        "source_file": "pump_evaluator.py",
        "description": "Minimum trim percentage",
        "category": "trim_limits"
      },
      {
        "value": 100.0,
        "source_file": "pump_evaluator.py",
        "description": "Maximum trim percentage",
        "category": "trim_limits"
      },
      {
        "value": 60,
        "source_file": "pump_evaluator.py",
        "description": "QBP lower threshold for allowable range",
        "category": "qbp_thresholds"
      },
      {
        "value": 80,
        "source_file": "pump_evaluator.py",
        "description": "QBP upper threshold for preferred range (lower bound)",
        "category": "qbp_thresholds"
      },
      {
        "value": 110,
        "source_file": "pump_evaluator.py",
        "description": "QBP lower threshold for allowable range (upper bound)",
        "category": "qbp_thresholds"
      },
      {
        "value": 140,
        "source_file": "pump_evaluator.py",
        "description": "QBP upper threshold for allowable range",
        "category": "qbp_thresholds"
      },
      {
        "value": 50,
        "source_file": "pump_evaluator.py",
        "description": "QBP lower threshold for acceptable range",
        "category": "qbp_thresholds"
      },
      {
        "value": 200,
        "source_file": "pump_evaluator.py",
        "description": "QBP upper threshold for acceptable range",
        "category": "qbp_thresholds"
      },
      {
        "value": 0.95,
        "source_file": "pump_evaluator.py",
        "description": "BEP proximity sweet spot lower bound",
        "category": "bep_proximity_thresholds"
      },
      {
        "value": 1.05,
        "source_file": "pump_evaluator.py",
        "description": "BEP proximity sweet spot upper bound",
        "category": "bep_proximity_thresholds"
      },
      {
        "value": 45,
        "source_file": "pump_evaluator.py",
        "description": "BEP proximity sweet spot score",
        "category": "bep_proximity_scores"
      },
      {
        "value": 0.9,
        "source_file": "pump_evaluator.py",
        "description": "BEP proximity good range lower bound",
        "category": "bep_proximity_thresholds"
      },
      {
        "value": 1.1,
        "source_file": "pump_evaluator.py",
        "description": "BEP proximity good range upper bound",
        "category": "bep_proximity_thresholds"
      },
      {
        "value": 40,
        "source_file": "pump_evaluator.py",
        "description": "BEP proximity good range score",
        "category": "bep_proximity_scores"
      },
      {
        "value": 0.8,
        "source_file": "pump_evaluator.py",
        "description": "BEP proximity acceptable range lower bound",
        "category": "bep_proximity_thresholds"
      },
      {
        "value": 1.2,
        "source_file": "pump_evaluator.py",
        "description": "BEP proximity acceptable range upper bound",
        "category": "bep_proximity_thresholds"
      },
      {
        "value": 30,
        "source_file": "pump_evaluator.py",
        "description": "BEP proximity acceptable range score",
        "category": "bep_proximity_scores"
      },
      {
        "value": 0.7,
        "source_file": "pump_evaluator.py",
        "description": "BEP proximity marginal range lower bound",
        "category": "bep_proximity_thresholds"
      },
      {
        "value": 1.3,
        "source_file": "pump_evaluator.py",
        "description": "BEP proximity marginal range upper bound",
        "category": "bep_proximity_thresholds"
      },
      {
        "value": 20,
        "source_file": "pump_evaluator.py",
        "description": "BEP proximity marginal range score",
        "category": "bep_proximity_scores"
      },
      {
        "value": 10,
        "source_file": "pump_evaluator.py",
        "description": "BEP proximity poor range score",
        "category": "bep_proximity_scores"
      },
      {
        "value": -30,
        "source_file": "pump_evaluator.py",
        "description": "Severe oversizing penalty",
        "category": "penalty_values"
      },
      {
        "value": -15,
        "source_file": "pump_evaluator.py",
        "description": "Moderate oversizing base penalty",
        "category": "penalty_values"
      },
      {
        "value": 0.1,
        "source_file": "pump_evaluator.py",
        "description": "Oversizing penalty multiplier",
        "category": "penalty_multipliers"
      },
      {
        "value": -50,
        "source_file": "pump_evaluator.py",
        "description": "Physical limitation penalty",
        "category": "penalty_values"
      },
      {
        "value": 35,
        "source_file": "pump_evaluator.py",
        "description": "Maximum efficiency score",
        "category": "efficiency_scores"
      },
      {
        "value": 30,
        "source_file": "pump_evaluator.py",
        "description": "Base efficiency score for good range",
        "category": "efficiency_scores"
      },
      {
        "value": 0.5,
        "source_file": "pump_evaluator.py",
        "description": "Efficiency score multiplier for good range",
        "category": "efficiency_multipliers"
      },
      {
        "value": 25,
        "source_file": "pump_evaluator.py",
        "description": "Base efficiency score for fair range",
        "category": "efficiency_scores"
      },
      {
        "value": 10,
        "source_file": "pump_evaluator.py",
        "description": "Base efficiency score for poor range",
        "category": "efficiency_scores"
      },
      {
        "value": 0.75,
        "source_file": "pump_evaluator.py",
        "description": "Efficiency score multiplier for poor range",
        "category": "efficiency_multipliers"
      },
      {
        "value": 2,
        "source_file": "pump_evaluator.py",
        "description": "Efficiency score multiplier for minimum range",
        "category": "efficiency_multipliers"
      },
      {
        "value": 5,
        "source_file": "pump_evaluator.py",
        "description": "Perfect head margin threshold percentage",
        "category": "head_margin_thresholds"
      },
      {
        "value": 20,
        "source_file": "pump_evaluator.py",
        "description": "Perfect head margin score",
        "category": "head_margin_scores"
      },
      {
        "value": 10,
        "source_file": "pump_evaluator.py",
        "description": "Good head margin threshold percentage",
        "category": "head_margin_thresholds"
      },
      {
        "value": 15,
        "source_file": "pump_evaluator.py",
        "description": "Acceptable head margin threshold percentage",
        "category": "head_margin_thresholds"
      },
      {
        "value": 95,
        "source_file": "pump_evaluator.py",
        "description": "Trim penalty threshold percentage",
        "category": "trim_penalty_thresholds"
      },
      {
        "value": 90,
        "source_file": "pump_evaluator.py",
        "description": "Small trim penalty threshold percentage",
        "category": "trim_penalty_thresholds"
      },
      {
        "value": -2,
        "source_file": "pump_evaluator.py",
        "description": "Small trim penalty value",
        "category": "trim_penalty_values"
      },
      {
        "value": 85,
        "source_file": "pump_evaluator.py",
        "description": "Moderate trim penalty threshold percentage",
        "category": "trim_penalty_thresholds"
      },
      {
        "value": -5,
        "source_file": "pump_evaluator.py",
        "description": "Moderate trim penalty value",
        "category": "trim_penalty_values"
      },
      {
        "value": -10,
        "source_file": "pump_evaluator.py",
        "description": "Large trim penalty value",
        "category": "trim_penalty_values"
      },
      {
        "value": 2,
        "source_file": "pump_evaluator.py",
        "description": "Minimum curve points required for validation",
        "category": "curve_validation"
      }
    ],
    "performance_vfd_constants": [
      {
        "value": 1450,
        "source_file": "performance_vfd.py",
        "description": "Default 4-pole motor speed (RPM)",
        "category": "vfd_defaults"
      },
      {
        "value": 0.3,
        "source_file": "performance_vfd.py",
        "description": "Default minimum VFD speed percentage",
        "category": "vfd_limits"
      },
      {
        "value": 1.2,
        "source_file": "performance_vfd.py",
        "description": "Default maximum VFD speed percentage",
        "category": "vfd_limits"
      },
      {
        "value": 0.4,
        "source_file": "performance_vfd.py",
        "description": "Default static head ratio for system curves",
        "category": "vfd_system_curves"
      },
      {
        "value": 50,
        "source_file": "performance_vfd.py",
        "description": "Base frequency for VFD calculations (Hz)",
        "category": "vfd_defaults"
      },
      {
        "value": 65.0,
        "source_file": "performance_vfd.py",
        "description": "Conservative efficiency default percentage",
        "category": "vfd_defaults"
      },
      {
        "value": 0.1,
        "source_file": "performance_vfd.py",
        "description": "Error tolerance for system curve matching",
        "category": "vfd_tolerances"
      },
      {
        "value": 2,
        "source_file": "performance_vfd.py",
        "description": "Minimum curve points required for VFD calculation",
        "category": "vfd_validation"
      },
      {
        "value": 2,
        "source_file": "performance_vfd.py",
        "description": "Minimum valid points on reference curve",
        "category": "vfd_validation"
      },
      {
        "value": 2,
        "source_file": "performance_vfd.py",
        "description": "Exponent for system curve calculation (Q²)",
        "category": "vfd_calculations"
      },
      {
        "value": 3,
        "source_file": "performance_vfd.py",
        "description": "Threshold for cubic interpolation",
        "category": "vfd_interpolation"
      },
      {
        "value": 0.5,
        "source_file": "performance_vfd.py",
        "description": "Search flow range lower multiplier",
        "category": "vfd_search_parameters"
      },
      {
        "value": 1.5,
        "source_file": "performance_vfd.py",
        "description": "Search flow range upper multiplier",
        "category": "vfd_search_parameters"
      },
      {
        "value": 100,
        "source_file": "performance_vfd.py",
        "description": "Number of search flow samples",
        "category": "vfd_search_parameters"
      },
      {
        "value": 0.05,
        "source_file": "performance_vfd.py",
        "description": "Flow proximity tolerance (5% of range)",
        "category": "vfd_tolerances"
      },
      {
        "value": 1000,
        "source_file": "performance_vfd.py",
        "description": "Water density for power calculation (kg/m³)",
        "category": "vfd_physical_constants"
      },
      {
        "value": 9.81,
        "source_file": "performance_vfd.py",
        "description": "Gravitational acceleration (m/s²)",
        "category": "vfd_physical_constants"
      },
      {
        "value": 3600,
        "source_file": "performance_vfd.py",
        "description": "Seconds per hour conversion",
        "category": "vfd_physical_constants"
      },
      {
        "value": 100,
        "source_file": "performance_vfd.py",
        "description": "Percentage conversion factor",
        "category": "vfd_conversion_factors"
      },
      {
        "value": 1000,
        "source_file": "performance_vfd.py",
        "description": "Watts to kilowatts conversion",
        "category": "vfd_conversion_factors"
      },
      {
        "value": 3,
        "source_file": "performance_vfd.py",
        "description": "Speed ratio exponent for power scaling",
        "category": "vfd_affinity_laws"
      },
      {
        "value": 2,
        "source_file": "performance_vfd.py",
        "description": "Speed ratio exponent for NPSH scaling",
        "category": "vfd_affinity_laws"
      },
      {
        "value": 30,
        "source_file": "performance_vfd.py",
        "description": "Minimum efficiency floor percentage",
        "category": "vfd_limits"
      },
      {
        "value": 1,
        "source_file": "performance_vfd.py",
        "description": "Rounding precision for flow and head display",
        "category": "vfd_display"
      },
      {
        "value": 100.0,
        "source_file": "performance_vfd.py",
        "description": "Full trim percentage (no trimming with VFD)",
        "category": "vfd_defaults"
      }
    ],
    "selection_core_constants": [
      {
        "value": 45,
        "source_file": "selection_core.py",
        "description": "BEP proximity scoring weight (maximum points)",
        "category": "scoring_weights"
      },
      {
        "value": 35,
        "source_file": "selection_core.py",
        "description": "Efficiency scoring weight (maximum points)",
        "category": "scoring_weights"
      },
      {
        "value": 20,
        "source_file": "selection_core.py",
        "description": "Head margin scoring weight (maximum points)",
        "category": "scoring_weights"
      },
      {
        "value": 0,
        "source_file": "selection_core.py",
        "description": "NPSH margin scoring weight (maximum points)",
        "category": "scoring_weights"
      },
      {
        "value": 0.4,
        "source_file": "selection_core.py",
        "description": "Flow pre-filtering minimum range (40%)",
        "category": "selection_ranges"
      },
      {
        "value": 3.0,
        "source_file": "selection_core.py",
        "description": "Flow pre-filtering maximum range (300%)",
        "category": "selection_ranges"
      },
      {
        "value": 0.3,
        "source_file": "selection_core.py",
        "description": "Head pre-filtering minimum range (30%)",
        "category": "selection_ranges"
      },
      {
        "value": 2.0,
        "source_file": "selection_core.py",
        "description": "Head pre-filtering maximum range (200%)",
        "category": "selection_ranges"
      },
      {
        "value": 0.9,
        "source_file": "selection_core.py",
        "description": "Flow range tolerance minimum multiplier (90%)",
        "category": "selection_tolerances"
      },
      {
        "value": 1.1,
        "source_file": "selection_core.py",
        "description": "Flow range tolerance maximum multiplier (110%)",
        "category": "selection_tolerances"
      },
      {
        "value": 85.0,
        "source_file": "selection_core.py",
        "description": "Minimum trim percentage",
        "category": "trim_constraints"
      },
      {
        "value": 100.0,
        "source_file": "selection_core.py",
        "description": "Maximum trim percentage",
        "category": "trim_constraints"
      },
      {
        "value": 1.5,
        "source_file": "selection_core.py",
        "description": "NPSH safety factor",
        "category": "safety_factors"
      },
      {
        "value": 50.0,
        "source_file": "selection_core.py",
        "description": "QBP minimum percentage",
        "category": "qbp_constraints"
      },
      {
        "value": 200.0,
        "source_file": "selection_core.py",
        "description": "QBP maximum percentage",
        "category": "qbp_constraints"
      },
      {
        "value": 150.0,
        "source_file": "selection_core.py",
        "description": "Head oversizing threshold percentage",
        "category": "oversizing_thresholds"
      },
      {
        "value": 300.0,
        "source_file": "selection_core.py",
        "description": "Severe head oversizing threshold percentage",
        "category": "oversizing_thresholds"
      },
      {
        "value": 10,
        "source_file": "selection_core.py",
        "description": "Number of sample pumps to log for debugging",
        "category": "logging_limits"
      },
      {
        "value": 5.0,
        "source_file": "selection_core.py",
        "description": "Minimum flow threshold (m³/hr)",
        "category": "flow_constraints"
      },
      {
        "value": 100,
        "source_file": "selection_core.py",
        "description": "Percentage conversion factor",
        "category": "calculation_factors"
      },
      {
        "value": 10,
        "source_file": "selection_core.py",
        "description": "Maximum excluded pumps to display in logs",
        "category": "logging_limits"
      },
      {
        "value": 5,
        "source_file": "selection_core.py",
        "description": "Number of sample excluded pumps to show",
        "category": "logging_limits"
      },
      {
        "value": 80,
        "source_file": "selection_core.py",
        "description": "Separator line length for pump evaluations",
        "category": "logging_display"
      },
      {
        "value": 5,
        "source_file": "selection_core.py",
        "description": "Default maximum results to return",
        "category": "result_limits"
      },
      {
        "value": 20,
        "source_file": "selection_core.py",
        "description": "Top excluded pumps for analysis",
        "category": "result_limits"
      }
    ],
    "physical_validator_constants": [
      {
        "value": 0.1,
        "source_file": "physical_validator.py",
        "description": "Flow tolerance for curve range validation (10%)",
        "category": "validation_tolerances"
      },
      {
        "value": 0.02,
        "source_file": "physical_validator.py",
        "description": "Head tolerance for capability validation (2%)",
        "category": "validation_tolerances"
      },
      {
        "value": 2,
        "source_file": "physical_validator.py",
        "description": "Minimum curve points required for validation",
        "category": "validation_requirements"
      },
      {
        "value": 100,
        "source_file": "physical_validator.py",
        "description": "Percentage conversion factor for tolerance display",
        "category": "display_formatting"
      },
      {
        "value": 2,
        "source_file": "physical_validator.py",
        "description": "Maximum flow range failures to display in error messages",
        "category": "error_display_limits"
      },
      {
        "value": 2,
        "source_file": "physical_validator.py",
        "description": "Maximum head insufficient details to display in error messages",
        "category": "error_display_limits"
      }
    ],
    "performance_core_constants": [
      {
        "value": 40.0,
        "source_file": "performance_core.py",
        "description": "Minimum acceptable efficiency percentage",
        "category": "performance_thresholds"
      },
      {
        "value": 1.0,
        "source_file": "performance_core.py",
        "description": "Default flow exponent for affinity laws",
        "category": "affinity_exponents"
      },
      {
        "value": 2.0,
        "source_file": "performance_core.py",
        "description": "Default head exponent for affinity laws",
        "category": "affinity_exponents"
      },
      {
        "value": 3.0,
        "source_file": "performance_core.py",
        "description": "Default power exponent for affinity laws",
        "category": "affinity_exponents"
      },
      {
        "value": 0.8,
        "source_file": "performance_core.py",
        "description": "Default efficiency exponent for affinity laws",
        "category": "affinity_exponents"
      },
      {
        "value": 85.0,
        "source_file": "performance_core.py",
        "description": "Minimum trim percentage (industry standard)",
        "category": "trim_standards"
      },
      {
        "value": 100.0,
        "source_file": "performance_core.py",
        "description": "Maximum trim percentage",
        "category": "trim_standards"
      },
      {
        "value": 1.2,
        "source_file": "performance_core.py",
        "description": "BEP shift flow exponent calibration factor",
        "category": "calibration_factors"
      },
      {
        "value": 2.2,
        "source_file": "performance_core.py",
        "description": "BEP shift head exponent calibration factor",
        "category": "calibration_factors"
      },
      {
        "value": 2.9,
        "source_file": "performance_core.py",
        "description": "Trim dependent small exponent calibration factor",
        "category": "calibration_factors"
      },
      {
        "value": 2.1,
        "source_file": "performance_core.py",
        "description": "Trim dependent large exponent calibration factor",
        "category": "calibration_factors"
      },
      {
        "value": 0.2,
        "source_file": "performance_core.py",
        "description": "Efficiency penalty volute calibration factor",
        "category": "calibration_factors"
      },
      {
        "value": 0.45,
        "source_file": "performance_core.py",
        "description": "Efficiency penalty diffuser calibration factor",
        "category": "calibration_factors"
      },
      {
        "value": 10.0,
        "source_file": "performance_core.py",
        "description": "NPSH degradation threshold",
        "category": "calibration_factors"
      },
      {
        "value": 1.15,
        "source_file": "performance_core.py",
        "description": "NPSH degradation factor",
        "category": "calibration_factors"
      },
      {
        "value": 1.0,
        "source_file": "performance_core.py",
        "description": "Default calibration factor value",
        "category": "default_values"
      },
      {
        "value": 2.0,
        "source_file": "performance_core.py",
        "description": "Default NPSHR exponent",
        "category": "affinity_exponents"
      },
      {
        "value": 100,
        "source_file": "performance_core.py",
        "description": "Default trim percentage for display",
        "category": "display_defaults"
      }
    ],
    "performance_industry_standard_constants": [
      {
        "value": 0.9,
        "source_file": "performance_industry_standard.py",
        "description": "Flow range tolerance minimum multiplier (90%)",
        "category": "curve_tolerances"
      },
      {
        "value": 1.1,
        "source_file": "performance_industry_standard.py",
        "description": "Flow range tolerance maximum multiplier (110%)",
        "category": "curve_tolerances"
      },
      {
        "value": 0.15,
        "source_file": "performance_industry_standard.py",
        "description": "Flow deviation threshold for authentic BEP efficiency (15%)",
        "category": "bep_thresholds"
      },
      {
        "value": 1.15,
        "source_file": "performance_industry_standard.py",
        "description": "Head capability threshold multiplier (115% above target)",
        "category": "capability_thresholds"
      },
      {
        "value": 0.98,
        "source_file": "performance_industry_standard.py",
        "description": "Minimum head delivery factor (98% of required)",
        "category": "capability_thresholds"
      },
      {
        "value": 0.7,
        "source_file": "performance_industry_standard.py",
        "description": "Severe head shortfall threshold (70% of target)",
        "category": "capability_thresholds"
      },
      {
        "value": 110,
        "source_file": "performance_industry_standard.py",
        "description": "QBP efficiency penalty threshold percentage",
        "category": "efficiency_penalties"
      },
      {
        "value": 0.1,
        "source_file": "performance_industry_standard.py",
        "description": "QBP efficiency penalty base factor (10%)",
        "category": "efficiency_penalties"
      },
      {
        "value": 5,
        "source_file": "performance_industry_standard.py",
        "description": "QBP efficiency penalty divisor for calculations",
        "category": "efficiency_penalties"
      },
      {
        "value": 40,
        "source_file": "performance_industry_standard.py",
        "description": "QBP efficiency penalty lower bound percentage",
        "category": "efficiency_penalties"
      },
      {
        "value": 2,
        "source_file": "performance_industry_standard.py",
        "description": "Minimum curve points required for calculation",
        "category": "validation_requirements"
      },
      {
        "value": 0.8835,
        "source_file": "performance_industry_standard.py",
        "description": "Manufacturer diameter ratio reference (88.35%)",
        "category": "manufacturer_references"
      },
      {
        "value": 64.0,
        "source_file": "performance_industry_standard.py",
        "description": "Expected delivered head for manufacturer analysis (m)",
        "category": "manufacturer_references"
      },
      {
        "value": 16.5,
        "source_file": "performance_industry_standard.py",
        "description": "Trim analysis reference value",
        "category": "trim_analysis"
      },
      {
        "value": 11.65,
        "source_file": "performance_industry_standard.py",
        "description": "Manufacturer trim reference percentage",
        "category": "trim_analysis"
      },
      {
        "value": 100,
        "source_file": "performance_industry_standard.py",
        "description": "Percentage conversion factor",
        "category": "conversion_factors"
      },
      {
        "value": 0.45,
        "source_file": "performance_industry_standard.py",
        "description": "Efficiency penalty diffuser default factor",
        "category": "efficiency_penalties"
      },
      {
        "value": 0.2,
        "source_file": "performance_industry_standard.py",
        "description": "Efficiency penalty volute default factor",
        "category": "efficiency_penalties"
      },
      {
        "value": 1.0,
        "source_file": "performance_industry_standard.py",
        "description": "Efficiency drop calculation base factor",
        "category": "efficiency_calculations"
      },
      {
        "value": 1000,
        "source_file": "performance_industry_standard.py",
        "description": "Water density for hydraulic calculations (kg/m³)",
        "category": "physical_constants"
      },
      {
        "value": 9.81,
        "source_file": "performance_industry_standard.py",
        "description": "Gravitational acceleration (m/s²)",
        "category": "physical_constants"
      },
      {
        "value": 3600,
        "source_file": "performance_industry_standard.py",
        "description": "Seconds per hour conversion",
        "category": "conversion_factors"
      },
      {
        "value": 10.0,
        "source_file": "performance_industry_standard.py",
        "description": "NPSH degradation threshold default",
        "category": "npsh_calculations"
      },
      {
        "value": 1.15,
        "source_file": "performance_industry_standard.py",
        "description": "NPSH degradation factor default",
        "category": "npsh_calculations"
      },
      {
        "value": 100.0,
        "source_file": "performance_industry_standard.py",
        "description": "Default true QBP percentage",
        "category": "qbp_calculations"
      }
    ],
    "performance_validation_constants": [
      {
        "value": 60,
        "source_file": "performance_validation.py",
        "description": "BEP proximity warning minimum threshold percentage",
        "category": "bep_warnings"
      },
      {
        "value": 130,
        "source_file": "performance_validation.py",
        "description": "BEP proximity warning maximum threshold percentage",
        "category": "bep_warnings"
      },
      {
        "value": 95,
        "source_file": "performance_validation.py",
        "description": "Optimal BEP range minimum percentage",
        "category": "optimal_ranges"
      },
      {
        "value": 105,
        "source_file": "performance_validation.py",
        "description": "Optimal BEP range maximum percentage",
        "category": "optimal_ranges"
      },
      {
        "value": 0.9,
        "source_file": "performance_validation.py",
        "description": "Maximum head/flow safety factor (90%)",
        "category": "safety_factors"
      },
      {
        "value": 1.0,
        "source_file": "performance_validation.py",
        "description": "Default calibration factor value",
        "category": "default_values"
      },
      {
        "value": 100,
        "source_file": "performance_validation.py",
        "description": "Percentage conversion factor for QBP calculation",
        "category": "conversion_factors"
      }
    ],
    "scoring_utils_constants": [
      {
        "value": 45,
        "source_file": "scoring_utils.py",
        "description": "Maximum BEP proximity score (excellent range)",
        "category": "bep_scoring"
      },
      {
        "value": 40,
        "source_file": "scoring_utils.py",
        "description": "High BEP proximity score (good range)",
        "category": "bep_scoring"
      },
      {
        "value": 30,
        "source_file": "scoring_utils.py",
        "description": "Medium BEP proximity score (fair range)",
        "category": "bep_scoring"
      },
      {
        "value": 20,
        "source_file": "scoring_utils.py",
        "description": "Low BEP proximity score (acceptable range)",
        "category": "bep_scoring"
      },
      {
        "value": 0.9,
        "source_file": "scoring_utils.py",
        "description": "BEP excellent range minimum factor (90%)",
        "category": "bep_ranges"
      },
      {
        "value": 1.1,
        "source_file": "scoring_utils.py",
        "description": "BEP excellent range maximum factor (110%)",
        "category": "bep_ranges"
      },
      {
        "value": 0.8,
        "source_file": "scoring_utils.py",
        "description": "BEP good range minimum factor (80%)",
        "category": "bep_ranges"
      },
      {
        "value": 1.2,
        "source_file": "scoring_utils.py",
        "description": "BEP good range maximum factor (120%)",
        "category": "bep_ranges"
      },
      {
        "value": 0.7,
        "source_file": "scoring_utils.py",
        "description": "BEP fair range minimum factor (70%)",
        "category": "bep_ranges"
      },
      {
        "value": 1.3,
        "source_file": "scoring_utils.py",
        "description": "BEP fair range maximum factor (130%)",
        "category": "bep_ranges"
      },
      {
        "value": 35,
        "source_file": "scoring_utils.py",
        "description": "Maximum efficiency score (excellent efficiency)",
        "category": "efficiency_scoring"
      },
      {
        "value": 30,
        "source_file": "scoring_utils.py",
        "description": "High efficiency score (good efficiency)",
        "category": "efficiency_scoring"
      },
      {
        "value": 25,
        "source_file": "scoring_utils.py",
        "description": "Medium efficiency score (fair efficiency)",
        "category": "efficiency_scoring"
      },
      {
        "value": 10,
        "source_file": "scoring_utils.py",
        "description": "Low efficiency score (poor efficiency)",
        "category": "efficiency_scoring"
      },
      {
        "value": 20,
        "source_file": "scoring_utils.py",
        "description": "Maximum head margin score",
        "category": "head_margin_scoring"
      },
      {
        "value": 15,
        "source_file": "scoring_utils.py",
        "description": "High head margin score",
        "category": "head_margin_scoring"
      },
      {
        "value": 5,
        "source_file": "scoring_utils.py",
        "description": "Low head margin score",
        "category": "head_margin_scoring"
      },
      {
        "value": 5,
        "source_file": "scoring_utils.py",
        "description": "Head margin excellent threshold percentage",
        "category": "head_margin_thresholds"
      },
      {
        "value": 10,
        "source_file": "scoring_utils.py",
        "description": "Head margin good threshold percentage",
        "category": "head_margin_thresholds"
      },
      {
        "value": 15,
        "source_file": "scoring_utils.py",
        "description": "Head margin fair threshold percentage",
        "category": "head_margin_thresholds"
      },
      {
        "value": -50,
        "source_file": "scoring_utils.py",
        "description": "Physical limitation penalty score",
        "category": "penalty_scores"
      },
      {
        "value": -2,
        "source_file": "scoring_utils.py",
        "description": "Light trim penalty score (90-95% range)",
        "category": "trim_penalties"
      },
      {
        "value": -5,
        "source_file": "scoring_utils.py",
        "description": "Moderate trim penalty score (85-90% range)",
        "category": "trim_penalties"
      },
      {
        "value": -10,
        "source_file": "scoring_utils.py",
        "description": "Heavy trim penalty score (below 85% range)",
        "category": "trim_penalties"
      },
      {
        "value": 90,
        "source_file": "scoring_utils.py",
        "description": "Light trim threshold percentage",
        "category": "trim_thresholds"
      },
      {
        "value": 95,
        "source_file": "scoring_utils.py",
        "description": "Minimal trim threshold percentage",
        "category": "trim_thresholds"
      },
      {
        "value": 95,
        "source_file": "scoring_utils.py",
        "description": "BEP optimal range minimum percentage",
        "category": "bep_optimal_ranges"
      },
      {
        "value": 105,
        "source_file": "scoring_utils.py",
        "description": "BEP optimal range maximum percentage",
        "category": "bep_optimal_ranges"
      },
      {
        "value": 85,
        "source_file": "scoring_utils.py",
        "description": "Excellent efficiency threshold percentage",
        "category": "efficiency_thresholds"
      },
      {
        "value": 75,
        "source_file": "scoring_utils.py",
        "description": "Good efficiency threshold percentage",
        "category": "efficiency_thresholds"
      },
      {
        "value": 65,
        "source_file": "scoring_utils.py",
        "description": "Fair efficiency threshold percentage",
        "category": "efficiency_thresholds"
      },
      {
        "value": 45,
        "source_file": "scoring_utils.py",
        "description": "Poor efficiency threshold percentage",
        "category": "efficiency_thresholds"
      },
      {
        "value": -15,
        "source_file": "scoring_utils.py",
        "description": "Moderate oversizing penalty threshold",
        "category": "penalty_scores"
      },
      {
        "value": 100,
        "source_file": "scoring_utils.py",
        "description": "Percentage conversion factor for BEP range calculations",
        "category": "conversion_factors"
      },
      {
        "value": 0,
        "source_file": "scoring_utils.py",
        "description": "Default score for no oversizing penalty",
        "category": "default_scores"
      },
      {
        "value": 100,
        "source_file": "scoring_utils.py",
        "description": "Default trim percentage value",
        "category": "default_values"
      },
      {
        "value": 85,
        "source_file": "scoring_utils.py",
        "description": "Trim penalty threshold reference (85%)",
        "category": "trim_references"
      }
    ],
    "performance_optimization_constants": [
      {
        "value": 40.0,
        "source_file": "performance_optimization.py",
        "description": "Minimum acceptable efficiency percentage",
        "category": "algorithm_thresholds"
      },
      {
        "value": 85.0,
        "source_file": "performance_optimization.py",
        "description": "Industry standard minimum trim percentage (15% max trim)",
        "category": "algorithm_thresholds"
      },
      {
        "value": 100.0,
        "source_file": "performance_optimization.py",
        "description": "Maximum trim percentage (full impeller)",
        "category": "algorithm_thresholds"
      },
      {
        "value": 1.05,
        "source_file": "performance_optimization.py",
        "description": "BEP precision tolerance factor (5% tolerance)",
        "category": "optimization_tolerances"
      },
      {
        "value": 1.02,
        "source_file": "performance_optimization.py",
        "description": "Head safety margin factor (2% safety margin)",
        "category": "optimization_tolerances"
      },
      {
        "value": 0.98,
        "source_file": "performance_optimization.py",
        "description": "Head requirement tolerance factor (98% minimum)",
        "category": "optimization_tolerances"
      },
      {
        "value": 2.0,
        "source_file": "performance_optimization.py",
        "description": "Trim test start increment percentage",
        "category": "algorithm_tuning"
      },
      {
        "value": 3.0,
        "source_file": "performance_optimization.py",
        "description": "Trim test increment percentage",
        "category": "algorithm_tuning"
      },
      {
        "value": 85.0,
        "source_file": "performance_optimization.py",
        "description": "Baseline modern pump efficiency percentage",
        "category": "efficiency_baselines"
      },
      {
        "value": 80.0,
        "source_file": "performance_optimization.py",
        "description": "Conservative fallback efficiency percentage",
        "category": "efficiency_baselines"
      },
      {
        "value": 40.0,
        "source_file": "performance_optimization.py",
        "description": "Minimum efficiency floor percentage",
        "category": "efficiency_baselines"
      },
      {
        "value": 0.2,
        "source_file": "performance_optimization.py",
        "description": "Trim efficiency penalty per percent (0.2% per 1% trim)",
        "category": "penalty_factors"
      },
      {
        "value": 15.0,
        "source_file": "performance_optimization.py",
        "description": "BEP deviation threshold percentage",
        "category": "penalty_factors"
      },
      {
        "value": 10.0,
        "source_file": "performance_optimization.py",
        "description": "Maximum BEP penalty percentage",
        "category": "penalty_factors"
      },
      {
        "value": 0.3,
        "source_file": "performance_optimization.py",
        "description": "BEP deviation penalty factor",
        "category": "penalty_factors"
      },
      {
        "value": 0.5,
        "source_file": "performance_optimization.py",
        "description": "Efficiency score weight (50% weight)",
        "category": "scoring_weights"
      },
      {
        "value": 0.3,
        "source_file": "performance_optimization.py",
        "description": "BEP proximity score weight (30% weight)",
        "category": "scoring_weights"
      },
      {
        "value": 0.2,
        "source_file": "performance_optimization.py",
        "description": "Head margin score weight (20% weight)",
        "category": "scoring_weights"
      },
      {
        "value": 2.0,
        "source_file": "performance_optimization.py",
        "description": "Head margin score factor",
        "category": "scoring_weights"
      },
      {
        "value": 0.85,
        "source_file": "performance_optimization.py",
        "description": "Default minimum diameter ratio fallback",
        "category": "algorithm_thresholds"
      },
      {
        "value": 0.7,
        "source_file": "performance_optimization.py",
        "description": "BEP proximity minimum efficiency factor",
        "category": "efficiency_baselines"
      },
      {
        "value": 0.5,
        "source_file": "performance_optimization.py",
        "description": "Default flow deviation from BEP fallback",
        "category": "algorithm_defaults"
      },
      {
        "value": 1.0,
        "source_file": "performance_optimization.py",
        "description": "BEP proximity maximum efficiency factor",
        "category": "efficiency_baselines"
      },
      {
        "value": 100,
        "source_file": "performance_optimization.py",
        "description": "Base score for calculations (100%)",
        "category": "algorithm_defaults"
      },
      {
        "value": 0.0,
        "source_file": "performance_optimization.py",
        "description": "Fill value for interpolation functions",
        "category": "algorithm_defaults"
      },
      {
        "value": 2.0,
        "source_file": "performance_optimization.py",
        "description": "Default head exponent for physics calculations",
        "category": "physics_constants"
      },
      {
        "value": 1.2,
        "source_file": "performance_optimization.py",
        "description": "Default BEP shift flow exponent calibration factor",
        "category": "physics_constants"
      },
      {
        "value": 2.2,
        "source_file": "performance_optimization.py",
        "description": "Default BEP shift head exponent calibration factor",
        "category": "physics_constants"
      }
    ]
  },
  "configuration_summary": {
    "total_constants": 418,
    "total_files_analyzed": 19,
    "sections_by_source_file": {
      "ai_analysis.py": 19,
      "ai_analyst.py": 15,
      "performance_affinity.py": 46,
      "performance_curves.py": 18,
      "physics_models.py": 24,
      "validation.py": 44,
      "cache.py": 4,
      "charts.py": 3,
      "hydraulic_classifier.py": 37,
      "proximity_searcher.py": 17,
      "pump_evaluator.py": 50,
      "performance_vfd.py": 25,
      "selection_core.py": 26,
      "physical_validator.py": 6,
      "performance_core.py": 18,
      "performance_industry_standard.py": 26,
      "performance_validation.py": 7,
      "scoring_utils.py": 31,
      "performance_optimization.py": 23
    },
    "usage_pattern": "Each brain module queries its own section using: brain_repo.get_config('[filename]_constants'). Each section contains only the constants used within that specific file."
  }
}